/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { scheduledTransactionsDelete } from "../funcs/scheduledTransactionsDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ScheduledTransactionsDeleteMutationVariables = {
  request: operations.DeleteScheduledTransactionRequest;
  options?: RequestOptions;
};

export type ScheduledTransactionsDeleteMutationData =
  models.ScheduledTransactionResponse;

/**
 * Deletes an existing scheduled transaction
 *
 * @remarks
 * Deletes a scheduled transaction
 */
export function useScheduledTransactionsDeleteMutation(
  options?: MutationHookOptions<
    ScheduledTransactionsDeleteMutationData,
    Error,
    ScheduledTransactionsDeleteMutationVariables
  >,
): UseMutationResult<
  ScheduledTransactionsDeleteMutationData,
  Error,
  ScheduledTransactionsDeleteMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildScheduledTransactionsDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyScheduledTransactionsDelete(): MutationKey {
  return ["ynab-ts", "scheduledTransactions", "delete"];
}

export function buildScheduledTransactionsDeleteMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ScheduledTransactionsDeleteMutationVariables,
  ) => Promise<ScheduledTransactionsDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyScheduledTransactionsDelete(),
    mutationFn: function scheduledTransactionsDeleteMutationFn({
      request,
      options,
    }): Promise<ScheduledTransactionsDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(scheduledTransactionsDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
