/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { categoriesGetByMonth } from "../funcs/categoriesGetByMonth.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CategoriesGetByMonthQueryData = models.CategoryResponse;

/**
 * Single category for a specific budget month
 *
 * @remarks
 * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
 */
export function useCategoriesGetByMonth(
  request: operations.GetMonthCategoryByIdRequest,
  options?: QueryHookOptions<CategoriesGetByMonthQueryData>,
): UseQueryResult<CategoriesGetByMonthQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildCategoriesGetByMonthQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Single category for a specific budget month
 *
 * @remarks
 * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
 */
export function useCategoriesGetByMonthSuspense(
  request: operations.GetMonthCategoryByIdRequest,
  options?: SuspenseQueryHookOptions<CategoriesGetByMonthQueryData>,
): UseSuspenseQueryResult<CategoriesGetByMonthQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildCategoriesGetByMonthQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCategoriesGetByMonth(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetMonthCategoryByIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCategoriesGetByMonthQuery(
      client$,
      request,
    ),
  });
}

export function setCategoriesGetByMonthData(
  client: QueryClient,
  queryKeyBase: [budgetId: string, month: RFCDate, categoryId: string],
  data: CategoriesGetByMonthQueryData,
): CategoriesGetByMonthQueryData | undefined {
  const key = queryKeyCategoriesGetByMonth(...queryKeyBase);

  return client.setQueryData<CategoriesGetByMonthQueryData>(key, data);
}

export function invalidateCategoriesGetByMonth(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [budgetId: string, month: RFCDate, categoryId: string]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Categories", "getByMonth", ...queryKeyBase],
  });
}

export function invalidateAllCategoriesGetByMonth(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Categories", "getByMonth"],
  });
}

export function buildCategoriesGetByMonthQuery(
  client$: YnabCore,
  request: operations.GetMonthCategoryByIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CategoriesGetByMonthQueryData>;
} {
  return {
    queryKey: queryKeyCategoriesGetByMonth(
      request.budgetId,
      request.month,
      request.categoryId,
    ),
    queryFn: async function categoriesGetByMonthQueryFn(
      ctx,
    ): Promise<CategoriesGetByMonthQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(categoriesGetByMonth(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCategoriesGetByMonth(
  budgetId: string,
  month: RFCDate,
  categoryId: string,
): QueryKey {
  return ["ynab-ts", "Categories", "getByMonth", budgetId, month, categoryId];
}
