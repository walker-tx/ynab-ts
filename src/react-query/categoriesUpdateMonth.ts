/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { categoriesUpdateMonth } from "../funcs/categoriesUpdateMonth.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CategoriesUpdateMonthMutationVariables = {
  request: operations.UpdateMonthCategoryRequest;
  options?: RequestOptions;
};

export type CategoriesUpdateMonthMutationData = models.SaveCategoryResponse;

/**
 * Update a category for a specific month
 *
 * @remarks
 * Update a category for a specific month.  Only `budgeted` amount can be updated.
 */
export function useCategoriesUpdateMonthMutation(
  options?: MutationHookOptions<
    CategoriesUpdateMonthMutationData,
    Error,
    CategoriesUpdateMonthMutationVariables
  >,
): UseMutationResult<
  CategoriesUpdateMonthMutationData,
  Error,
  CategoriesUpdateMonthMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildCategoriesUpdateMonthMutation(client, options),
    ...options,
  });
}

export function mutationKeyCategoriesUpdateMonth(): MutationKey {
  return ["ynab-ts", "Categories", "updateMonth"];
}

export function buildCategoriesUpdateMonthMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CategoriesUpdateMonthMutationVariables,
  ) => Promise<CategoriesUpdateMonthMutationData>;
} {
  return {
    mutationKey: mutationKeyCategoriesUpdateMonth(),
    mutationFn: function categoriesUpdateMonthMutationFn({
      request,
      options,
    }): Promise<CategoriesUpdateMonthMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(categoriesUpdateMonth(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
