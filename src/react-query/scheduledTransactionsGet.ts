/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { scheduledTransactionsGet } from "../funcs/scheduledTransactionsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ScheduledTransactionsGetQueryData =
  models.ScheduledTransactionResponse;

/**
 * Single scheduled transaction
 *
 * @remarks
 * Returns a single scheduled transaction
 */
export function useScheduledTransactionsGet(
  request: operations.GetScheduledTransactionByIdRequest,
  options?: QueryHookOptions<ScheduledTransactionsGetQueryData>,
): UseQueryResult<ScheduledTransactionsGetQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildScheduledTransactionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Single scheduled transaction
 *
 * @remarks
 * Returns a single scheduled transaction
 */
export function useScheduledTransactionsGetSuspense(
  request: operations.GetScheduledTransactionByIdRequest,
  options?: SuspenseQueryHookOptions<ScheduledTransactionsGetQueryData>,
): UseSuspenseQueryResult<ScheduledTransactionsGetQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildScheduledTransactionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchScheduledTransactionsGet(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetScheduledTransactionByIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildScheduledTransactionsGetQuery(
      client$,
      request,
    ),
  });
}

export function setScheduledTransactionsGetData(
  client: QueryClient,
  queryKeyBase: [budgetId: string, scheduledTransactionId: string],
  data: ScheduledTransactionsGetQueryData,
): ScheduledTransactionsGetQueryData | undefined {
  const key = queryKeyScheduledTransactionsGet(...queryKeyBase);

  return client.setQueryData<ScheduledTransactionsGetQueryData>(key, data);
}

export function invalidateScheduledTransactionsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [budgetId: string, scheduledTransactionId: string]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "scheduledTransactions", "get", ...queryKeyBase],
  });
}

export function invalidateAllScheduledTransactionsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "scheduledTransactions", "get"],
  });
}

export function buildScheduledTransactionsGetQuery(
  client$: YnabCore,
  request: operations.GetScheduledTransactionByIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ScheduledTransactionsGetQueryData>;
} {
  return {
    queryKey: queryKeyScheduledTransactionsGet(
      request.budgetId,
      request.scheduledTransactionId,
    ),
    queryFn: async function scheduledTransactionsGetQueryFn(
      ctx,
    ): Promise<ScheduledTransactionsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(scheduledTransactionsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyScheduledTransactionsGet(
  budgetId: string,
  scheduledTransactionId: string,
): QueryKey {
  return [
    "ynab-ts",
    "scheduledTransactions",
    "get",
    budgetId,
    scheduledTransactionId,
  ];
}
