/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { monthsGet } from "../funcs/monthsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type MonthsGetQueryData = operations.GetBudgetMonthResponse;

/**
 * Single budget month
 *
 * @remarks
 * Returns a single budget month
 */
export function useMonthsGet(
  request: operations.GetBudgetMonthRequest,
  options?: QueryHookOptions<MonthsGetQueryData>,
): UseQueryResult<MonthsGetQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildMonthsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Single budget month
 *
 * @remarks
 * Returns a single budget month
 */
export function useMonthsGetSuspense(
  request: operations.GetBudgetMonthRequest,
  options?: SuspenseQueryHookOptions<MonthsGetQueryData>,
): UseSuspenseQueryResult<MonthsGetQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildMonthsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchMonthsGet(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetBudgetMonthRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildMonthsGetQuery(
      client$,
      request,
    ),
  });
}

export function setMonthsGetData(
  client: QueryClient,
  queryKeyBase: [budgetId: string, month: RFCDate],
  data: MonthsGetQueryData,
): MonthsGetQueryData | undefined {
  const key = queryKeyMonthsGet(...queryKeyBase);

  return client.setQueryData<MonthsGetQueryData>(key, data);
}

export function invalidateMonthsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[budgetId: string, month: RFCDate]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Months", "get", ...queryKeyBase],
  });
}

export function invalidateAllMonthsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Months", "get"],
  });
}

export function buildMonthsGetQuery(
  client$: YnabCore,
  request: operations.GetBudgetMonthRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<MonthsGetQueryData>;
} {
  return {
    queryKey: queryKeyMonthsGet(request.budgetId, request.month),
    queryFn: async function monthsGetQueryFn(ctx): Promise<MonthsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(monthsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyMonthsGet(budgetId: string, month: RFCDate): QueryKey {
  return ["ynab-ts", "Months", "get", budgetId, month];
}
