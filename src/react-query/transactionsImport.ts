/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { transactionsImport } from "../funcs/transactionsImport.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TransactionsImportMutationVariables = {
  request: operations.ImportTransactionsRequest;
  options?: RequestOptions;
};

export type TransactionsImportMutationData = models.TransactionsImportResponse;

/**
 * Import transactions
 *
 * @remarks
 * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
 */
export function useTransactionsImportMutation(
  options?: MutationHookOptions<
    TransactionsImportMutationData,
    Error,
    TransactionsImportMutationVariables
  >,
): UseMutationResult<
  TransactionsImportMutationData,
  Error,
  TransactionsImportMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildTransactionsImportMutation(client, options),
    ...options,
  });
}

export function mutationKeyTransactionsImport(): MutationKey {
  return ["ynab-ts", "Transactions", "import"];
}

export function buildTransactionsImportMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TransactionsImportMutationVariables,
  ) => Promise<TransactionsImportMutationData>;
} {
  return {
    mutationKey: mutationKeyTransactionsImport(),
    mutationFn: function transactionsImportMutationFn({
      request,
      options,
    }): Promise<TransactionsImportMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(transactionsImport(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
