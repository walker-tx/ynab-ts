/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TransactionsListQueryData = models.TransactionsResponse;

/**
 * List transactions
 *
 * @remarks
 * Returns budget transactions, excluding any pending transactions
 */
export function useTransactionsList(
  request: operations.GetTransactionsRequest,
  options?: QueryHookOptions<TransactionsListQueryData>,
): UseQueryResult<TransactionsListQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildTransactionsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List transactions
 *
 * @remarks
 * Returns budget transactions, excluding any pending transactions
 */
export function useTransactionsListSuspense(
  request: operations.GetTransactionsRequest,
  options?: SuspenseQueryHookOptions<TransactionsListQueryData>,
): UseSuspenseQueryResult<TransactionsListQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildTransactionsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTransactionsList(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetTransactionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTransactionsListQuery(
      client$,
      request,
    ),
  });
}

export function setTransactionsListData(
  client: QueryClient,
  queryKeyBase: [
    budgetId: string,
    parameters: {
      sinceDate?: RFCDate | undefined;
      type?: operations.GetTransactionsType | undefined;
      lastKnowledgeOfServer?: number | undefined;
    },
  ],
  data: TransactionsListQueryData,
): TransactionsListQueryData | undefined {
  const key = queryKeyTransactionsList(...queryKeyBase);

  return client.setQueryData<TransactionsListQueryData>(key, data);
}

export function invalidateTransactionsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      budgetId: string,
      parameters: {
        sinceDate?: RFCDate | undefined;
        type?: operations.GetTransactionsType | undefined;
        lastKnowledgeOfServer?: number | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Transactions", "list", ...queryKeyBase],
  });
}

export function invalidateAllTransactionsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Transactions", "list"],
  });
}

export function buildTransactionsListQuery(
  client$: YnabCore,
  request: operations.GetTransactionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<TransactionsListQueryData>;
} {
  return {
    queryKey: queryKeyTransactionsList(request.budgetId, {
      sinceDate: request.sinceDate,
      type: request.type,
      lastKnowledgeOfServer: request.lastKnowledgeOfServer,
    }),
    queryFn: async function transactionsListQueryFn(
      ctx,
    ): Promise<TransactionsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(transactionsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTransactionsList(
  budgetId: string,
  parameters: {
    sinceDate?: RFCDate | undefined;
    type?: operations.GetTransactionsType | undefined;
    lastKnowledgeOfServer?: number | undefined;
  },
): QueryKey {
  return ["ynab-ts", "Transactions", "list", budgetId, parameters];
}
