/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { accountsGet } from "../funcs/accountsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AccountsGetQueryData = operations.GetAccountByIdResponse;

/**
 * Single account
 *
 * @remarks
 * Returns a single account
 */
export function useAccountsGet(
  request: operations.GetAccountByIdRequest,
  options?: QueryHookOptions<AccountsGetQueryData>,
): UseQueryResult<AccountsGetQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildAccountsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Single account
 *
 * @remarks
 * Returns a single account
 */
export function useAccountsGetSuspense(
  request: operations.GetAccountByIdRequest,
  options?: SuspenseQueryHookOptions<AccountsGetQueryData>,
): UseSuspenseQueryResult<AccountsGetQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildAccountsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAccountsGet(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetAccountByIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAccountsGetQuery(
      client$,
      request,
    ),
  });
}

export function setAccountsGetData(
  client: QueryClient,
  queryKeyBase: [budgetId: string, accountId: string],
  data: AccountsGetQueryData,
): AccountsGetQueryData | undefined {
  const key = queryKeyAccountsGet(...queryKeyBase);

  return client.setQueryData<AccountsGetQueryData>(key, data);
}

export function invalidateAccountsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[budgetId: string, accountId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Accounts", "get", ...queryKeyBase],
  });
}

export function invalidateAllAccountsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Accounts", "get"],
  });
}

export function buildAccountsGetQuery(
  client$: YnabCore,
  request: operations.GetAccountByIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<AccountsGetQueryData>;
} {
  return {
    queryKey: queryKeyAccountsGet(request.budgetId, request.accountId),
    queryFn: async function accountsGetQueryFn(
      ctx,
    ): Promise<AccountsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(accountsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAccountsGet(
  budgetId: string,
  accountId: string,
): QueryKey {
  return ["ynab-ts", "Accounts", "get", budgetId, accountId];
}
