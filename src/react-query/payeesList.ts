/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { payeesList } from "../funcs/payeesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PayeesListQueryData = operations.GetPayeesResponse;

/**
 * List payees
 *
 * @remarks
 * Returns all payees
 */
export function usePayeesList(
  request: operations.GetPayeesRequest,
  options?: QueryHookOptions<PayeesListQueryData>,
): UseQueryResult<PayeesListQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildPayeesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List payees
 *
 * @remarks
 * Returns all payees
 */
export function usePayeesListSuspense(
  request: operations.GetPayeesRequest,
  options?: SuspenseQueryHookOptions<PayeesListQueryData>,
): UseSuspenseQueryResult<PayeesListQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildPayeesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPayeesList(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetPayeesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPayeesListQuery(
      client$,
      request,
    ),
  });
}

export function setPayeesListData(
  client: QueryClient,
  queryKeyBase: [
    budgetId: string,
    parameters: { lastKnowledgeOfServer?: number | undefined },
  ],
  data: PayeesListQueryData,
): PayeesListQueryData | undefined {
  const key = queryKeyPayeesList(...queryKeyBase);

  return client.setQueryData<PayeesListQueryData>(key, data);
}

export function invalidatePayeesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      budgetId: string,
      parameters: { lastKnowledgeOfServer?: number | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Payees", "list", ...queryKeyBase],
  });
}

export function invalidateAllPayeesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Payees", "list"],
  });
}

export function buildPayeesListQuery(
  client$: YnabCore,
  request: operations.GetPayeesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<PayeesListQueryData>;
} {
  return {
    queryKey: queryKeyPayeesList(request.budgetId, {
      lastKnowledgeOfServer: request.lastKnowledgeOfServer,
    }),
    queryFn: async function payeesListQueryFn(
      ctx,
    ): Promise<PayeesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(payeesList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPayeesList(
  budgetId: string,
  parameters: { lastKnowledgeOfServer?: number | undefined },
): QueryKey {
  return ["ynab-ts", "Payees", "list", budgetId, parameters];
}
