/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TransactionsGetQueryData = operations.GetTransactionByIdResponse;

/**
 * Single transaction
 *
 * @remarks
 * Returns a single transaction
 */
export function useTransactionsGet(
  request: operations.GetTransactionByIdRequest,
  options?: QueryHookOptions<TransactionsGetQueryData>,
): UseQueryResult<TransactionsGetQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildTransactionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Single transaction
 *
 * @remarks
 * Returns a single transaction
 */
export function useTransactionsGetSuspense(
  request: operations.GetTransactionByIdRequest,
  options?: SuspenseQueryHookOptions<TransactionsGetQueryData>,
): UseSuspenseQueryResult<TransactionsGetQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildTransactionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTransactionsGet(
  queryClient: QueryClient,
  client$: YnabCore,
  request: operations.GetTransactionByIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTransactionsGetQuery(
      client$,
      request,
    ),
  });
}

export function setTransactionsGetData(
  client: QueryClient,
  queryKeyBase: [budgetId: string, transactionId: string],
  data: TransactionsGetQueryData,
): TransactionsGetQueryData | undefined {
  const key = queryKeyTransactionsGet(...queryKeyBase);

  return client.setQueryData<TransactionsGetQueryData>(key, data);
}

export function invalidateTransactionsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[budgetId: string, transactionId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Transactions", "get", ...queryKeyBase],
  });
}

export function invalidateAllTransactionsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Transactions", "get"],
  });
}

export function buildTransactionsGetQuery(
  client$: YnabCore,
  request: operations.GetTransactionByIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TransactionsGetQueryData>;
} {
  return {
    queryKey: queryKeyTransactionsGet(request.budgetId, request.transactionId),
    queryFn: async function transactionsGetQueryFn(
      ctx,
    ): Promise<TransactionsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(transactionsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTransactionsGet(
  budgetId: string,
  transactionId: string,
): QueryKey {
  return ["ynab-ts", "Transactions", "get", budgetId, transactionId];
}
