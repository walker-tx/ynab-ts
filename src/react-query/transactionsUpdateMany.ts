/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { transactionsUpdateMany } from "../funcs/transactionsUpdateMany.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TransactionsUpdateManyMutationVariables = {
  request: operations.UpdateTransactionsRequest;
  options?: RequestOptions;
};

export type TransactionsUpdateManyMutationData =
  models.SaveTransactionsResponse;

/**
 * Update multiple transactions
 *
 * @remarks
 * Updates multiple transactions, by `id` or `import_id`.
 */
export function useTransactionsUpdateManyMutation(
  options?: MutationHookOptions<
    TransactionsUpdateManyMutationData,
    Error,
    TransactionsUpdateManyMutationVariables
  >,
): UseMutationResult<
  TransactionsUpdateManyMutationData,
  Error,
  TransactionsUpdateManyMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildTransactionsUpdateManyMutation(client, options),
    ...options,
  });
}

export function mutationKeyTransactionsUpdateMany(): MutationKey {
  return ["ynab-ts", "Transactions", "updateMany"];
}

export function buildTransactionsUpdateManyMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TransactionsUpdateManyMutationVariables,
  ) => Promise<TransactionsUpdateManyMutationData>;
} {
  return {
    mutationKey: mutationKeyTransactionsUpdateMany(),
    mutationFn: function transactionsUpdateManyMutationFn({
      request,
      options,
    }): Promise<TransactionsUpdateManyMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(transactionsUpdateMany(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
