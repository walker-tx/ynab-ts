/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { scheduledTransactionsCreate } from "../funcs/scheduledTransactionsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ScheduledTransactionsCreateMutationVariables = {
  request: operations.CreateScheduledTransactionRequest;
  options?: RequestOptions;
};

export type ScheduledTransactionsCreateMutationData =
  models.ScheduledTransactionResponse;

/**
 * Create a single scheduled transaction
 *
 * @remarks
 * Creates a single scheduled transaction (a transaction with a future date).
 */
export function useScheduledTransactionsCreateMutation(
  options?: MutationHookOptions<
    ScheduledTransactionsCreateMutationData,
    Error,
    ScheduledTransactionsCreateMutationVariables
  >,
): UseMutationResult<
  ScheduledTransactionsCreateMutationData,
  Error,
  ScheduledTransactionsCreateMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildScheduledTransactionsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyScheduledTransactionsCreate(): MutationKey {
  return ["ynab-ts", "scheduledTransactions", "create"];
}

export function buildScheduledTransactionsCreateMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ScheduledTransactionsCreateMutationVariables,
  ) => Promise<ScheduledTransactionsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyScheduledTransactionsCreate(),
    mutationFn: function scheduledTransactionsCreateMutationFn({
      request,
      options,
    }): Promise<ScheduledTransactionsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(scheduledTransactionsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
