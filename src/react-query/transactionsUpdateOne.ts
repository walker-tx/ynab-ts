/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { transactionsUpdateOne } from "../funcs/transactionsUpdateOne.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TransactionsUpdateOneMutationVariables = {
  request: operations.UpdateTransactionRequest;
  options?: RequestOptions;
};

export type TransactionsUpdateOneMutationData = models.TransactionResponse;

/**
 * Updates an existing transaction
 *
 * @remarks
 * Updates a single transaction
 */
export function useTransactionsUpdateOneMutation(
  options?: MutationHookOptions<
    TransactionsUpdateOneMutationData,
    Error,
    TransactionsUpdateOneMutationVariables
  >,
): UseMutationResult<
  TransactionsUpdateOneMutationData,
  Error,
  TransactionsUpdateOneMutationVariables
> {
  const client = useYnabContext();
  return useMutation({
    ...buildTransactionsUpdateOneMutation(client, options),
    ...options,
  });
}

export function mutationKeyTransactionsUpdateOne(): MutationKey {
  return ["ynab-ts", "Transactions", "updateOne"];
}

export function buildTransactionsUpdateOneMutation(
  client$: YnabCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TransactionsUpdateOneMutationVariables,
  ) => Promise<TransactionsUpdateOneMutationData>;
} {
  return {
    mutationKey: mutationKeyTransactionsUpdateOne(),
    mutationFn: function transactionsUpdateOneMutationFn({
      request,
      options,
    }): Promise<TransactionsUpdateOneMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(transactionsUpdateOne(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
