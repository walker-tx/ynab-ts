/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { userGet } from "../funcs/userGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type UserGetQueryData = operations.GetUserResponse;

/**
 * User info
 *
 * @remarks
 * Returns authenticated user information
 */
export function useUserGet(
  options?: QueryHookOptions<UserGetQueryData>,
): UseQueryResult<UserGetQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildUserGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * User info
 *
 * @remarks
 * Returns authenticated user information
 */
export function useUserGetSuspense(
  options?: SuspenseQueryHookOptions<UserGetQueryData>,
): UseSuspenseQueryResult<UserGetQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildUserGetQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchUserGet(
  queryClient: QueryClient,
  client$: YnabCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildUserGetQuery(
      client$,
    ),
  });
}

export function setUserGetData(
  client: QueryClient,
  data: UserGetQueryData,
): UserGetQueryData | undefined {
  const key = queryKeyUserGet();

  return client.setQueryData<UserGetQueryData>(key, data);
}

export function invalidateAllUserGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "User", "get"],
  });
}

export function buildUserGetQuery(
  client$: YnabCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<UserGetQueryData>;
} {
  return {
    queryKey: queryKeyUserGet(),
    queryFn: async function userGetQueryFn(ctx): Promise<UserGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(userGet(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyUserGet(): QueryKey {
  return ["ynab-ts", "User", "get"];
}
