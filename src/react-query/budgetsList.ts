/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { YnabCore } from "../core.js";
import { budgetsList } from "../funcs/budgetsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useYnabContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type BudgetsListQueryData = operations.GetBudgetsResponse;

/**
 * List budgets
 *
 * @remarks
 * Returns budgets list with summary information
 */
export function useBudgetsList(
  request?: operations.GetBudgetsRequest | undefined,
  options?: QueryHookOptions<BudgetsListQueryData>,
): UseQueryResult<BudgetsListQueryData, Error> {
  const client = useYnabContext();
  return useQuery({
    ...buildBudgetsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List budgets
 *
 * @remarks
 * Returns budgets list with summary information
 */
export function useBudgetsListSuspense(
  request?: operations.GetBudgetsRequest | undefined,
  options?: SuspenseQueryHookOptions<BudgetsListQueryData>,
): UseSuspenseQueryResult<BudgetsListQueryData, Error> {
  const client = useYnabContext();
  return useSuspenseQuery({
    ...buildBudgetsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchBudgetsList(
  queryClient: QueryClient,
  client$: YnabCore,
  request?: operations.GetBudgetsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildBudgetsListQuery(
      client$,
      request,
    ),
  });
}

export function setBudgetsListData(
  client: QueryClient,
  queryKeyBase: [parameters: { includeAccounts?: boolean | undefined }],
  data: BudgetsListQueryData,
): BudgetsListQueryData | undefined {
  const key = queryKeyBudgetsList(...queryKeyBase);

  return client.setQueryData<BudgetsListQueryData>(key, data);
}

export function invalidateBudgetsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { includeAccounts?: boolean | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Budgets", "list", ...queryKeyBase],
  });
}

export function invalidateAllBudgetsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["ynab-ts", "Budgets", "list"],
  });
}

export function buildBudgetsListQuery(
  client$: YnabCore,
  request?: operations.GetBudgetsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<BudgetsListQueryData>;
} {
  return {
    queryKey: queryKeyBudgetsList({
      includeAccounts: request?.includeAccounts,
    }),
    queryFn: async function budgetsListQueryFn(
      ctx,
    ): Promise<BudgetsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(budgetsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyBudgetsList(
  parameters: { includeAccounts?: boolean | undefined },
): QueryKey {
  return ["ynab-ts", "Budgets", "list", parameters];
}
