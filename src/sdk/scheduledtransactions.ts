/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scheduledTransactionsCreate } from "../funcs/scheduledTransactionsCreate.js";
import { scheduledTransactionsDelete } from "../funcs/scheduledTransactionsDelete.js";
import { scheduledTransactionsGet } from "../funcs/scheduledTransactionsGet.js";
import { scheduledTransactionsList } from "../funcs/scheduledTransactionsList.js";
import { scheduledTransactionsUpdate } from "../funcs/scheduledTransactionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ScheduledTransactions extends ClientSDK {
  /**
   * List scheduled transactions
   *
   * @remarks
   * Returns all scheduled transactions
   */
  async list(
    request: operations.GetScheduledTransactionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetScheduledTransactionsResponse> {
    return unwrapAsync(scheduledTransactionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a single scheduled transaction
   *
   * @remarks
   * Creates a single scheduled transaction (a transaction with a future date).
   */
  async create(
    request: operations.CreateScheduledTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.ScheduledTransactionResponse> {
    return unwrapAsync(scheduledTransactionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Single scheduled transaction
   *
   * @remarks
   * Returns a single scheduled transaction
   */
  async get(
    request: operations.GetScheduledTransactionByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetScheduledTransactionByIdResponse> {
    return unwrapAsync(scheduledTransactionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an existing scheduled transaction
   *
   * @remarks
   * Updates a single scheduled transaction
   */
  async update(
    request: operations.UpdateScheduledTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.ScheduledTransactionResponse> {
    return unwrapAsync(scheduledTransactionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an existing scheduled transaction
   *
   * @remarks
   * Deletes a scheduled transaction
   */
  async delete(
    request: operations.DeleteScheduledTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.ScheduledTransactionResponse> {
    return unwrapAsync(scheduledTransactionsDelete(
      this,
      request,
      options,
    ));
  }
}
