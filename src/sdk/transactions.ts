/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionsCreate } from "../funcs/transactionsCreate.js";
import { transactionsDelete } from "../funcs/transactionsDelete.js";
import { transactionsGet } from "../funcs/transactionsGet.js";
import { transactionsImport } from "../funcs/transactionsImport.js";
import { transactionsList } from "../funcs/transactionsList.js";
import { transactionsListByAccount } from "../funcs/transactionsListByAccount.js";
import { transactionsListByCategory } from "../funcs/transactionsListByCategory.js";
import { transactionsListByMonth } from "../funcs/transactionsListByMonth.js";
import { transactionsListByPayee } from "../funcs/transactionsListByPayee.js";
import { transactionsUpdateMany } from "../funcs/transactionsUpdateMany.js";
import { transactionsUpdateOne } from "../funcs/transactionsUpdateOne.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transactions extends ClientSDK {
  /**
   * List transactions
   *
   * @remarks
   * Returns budget transactions, excluding any pending transactions
   */
  async list(
    request: operations.GetTransactionsRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionsResponse> {
    return unwrapAsync(transactionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a single transaction or multiple transactions
   *
   * @remarks
   * Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.  Scheduled transactions (transactions with a future date) cannot be created on this endpoint.
   */
  async create(
    request: operations.CreateTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.SaveTransactionsResponse> {
    return unwrapAsync(transactionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update multiple transactions
   *
   * @remarks
   * Updates multiple transactions, by `id` or `import_id`.
   */
  async updateMany(
    request: operations.UpdateTransactionsRequest,
    options?: RequestOptions,
  ): Promise<models.SaveTransactionsResponse> {
    return unwrapAsync(transactionsUpdateMany(
      this,
      request,
      options,
    ));
  }

  /**
   * Import transactions
   *
   * @remarks
   * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking "Import" on each account in the web application or tapping the "New Transactions" banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
   */
  async import(
    request: operations.ImportTransactionsRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionsImportResponse> {
    return unwrapAsync(transactionsImport(
      this,
      request,
      options,
    ));
  }

  /**
   * Single transaction
   *
   * @remarks
   * Returns a single transaction
   */
  async get(
    request: operations.GetTransactionByIdRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionByIdResponse> {
    return unwrapAsync(transactionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Updates an existing transaction
   *
   * @remarks
   * Updates a single transaction
   */
  async updateOne(
    request: operations.UpdateTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsUpdateOne(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an existing transaction
   *
   * @remarks
   * Deletes a transaction
   */
  async delete(
    request: operations.DeleteTransactionRequest,
    options?: RequestOptions,
  ): Promise<models.TransactionResponse> {
    return unwrapAsync(transactionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List account transactions
   *
   * @remarks
   * Returns all transactions for a specified account, excluding any pending transactions
   */
  async listByAccount(
    request: operations.GetTransactionsByAccountRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionsByAccountResponse> {
    return unwrapAsync(transactionsListByAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * List category transactions, excluding any pending transactions
   *
   * @remarks
   * Returns all transactions for a specified category
   */
  async listByCategory(
    request: operations.GetTransactionsByCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionsByCategoryResponse> {
    return unwrapAsync(transactionsListByCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * List payee transactions, excluding any pending transactions
   *
   * @remarks
   * Returns all transactions for a specified payee
   */
  async listByPayee(
    request: operations.GetTransactionsByPayeeRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionsByPayeeResponse> {
    return unwrapAsync(transactionsListByPayee(
      this,
      request,
      options,
    ));
  }

  /**
   * List transactions in month, excluding any pending transactions
   *
   * @remarks
   * Returns all transactions for a specified month
   */
  async listByMonth(
    request: operations.GetTransactionsByMonthRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransactionsByMonthResponse> {
    return unwrapAsync(transactionsListByMonth(
      this,
      request,
      options,
    ));
  }
}
