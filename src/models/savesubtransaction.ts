/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SaveSubTransaction = {
  /**
   * The subtransaction amount in milliunits format.
   */
  amount: number;
  /**
   * The payee for the subtransaction.
   */
  payeeId?: string | null | undefined;
  /**
   * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if import_id is also specified on parent transaction) or (2) a payee with the same name or (3) creation of a new payee.
   */
  payeeName?: string | null | undefined;
  /**
   * The category for the subtransaction.  Credit Card Payment categories are not permitted and will be ignored if supplied.
   */
  categoryId?: string | null | undefined;
  memo?: string | null | undefined;
};

/** @internal */
export const SaveSubTransaction$inboundSchema: z.ZodType<
  SaveSubTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
  });
});

/** @internal */
export type SaveSubTransaction$Outbound = {
  amount: number;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  memo?: string | null | undefined;
};

/** @internal */
export const SaveSubTransaction$outboundSchema: z.ZodType<
  SaveSubTransaction$Outbound,
  z.ZodTypeDef,
  SaveSubTransaction
> = z.object({
  amount: z.number().int(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveSubTransaction$ {
  /** @deprecated use `SaveSubTransaction$inboundSchema` instead. */
  export const inboundSchema = SaveSubTransaction$inboundSchema;
  /** @deprecated use `SaveSubTransaction$outboundSchema` instead. */
  export const outboundSchema = SaveSubTransaction$outboundSchema;
  /** @deprecated use `SaveSubTransaction$Outbound` instead. */
  export type Outbound = SaveSubTransaction$Outbound;
}

export function saveSubTransactionToJSON(
  saveSubTransaction: SaveSubTransaction,
): string {
  return JSON.stringify(
    SaveSubTransaction$outboundSchema.parse(saveSubTransaction),
  );
}

export function saveSubTransactionFromJSON(
  jsonString: string,
): SafeParseResult<SaveSubTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveSubTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveSubTransaction' from JSON`,
  );
}
