/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  Account,
  Account$inboundSchema,
  Account$Outbound,
  Account$outboundSchema,
} from "./account.js";
import {
  CurrencyFormat,
  CurrencyFormat$inboundSchema,
  CurrencyFormat$Outbound,
  CurrencyFormat$outboundSchema,
} from "./currencyformat.js";
import {
  DateFormat,
  DateFormat$inboundSchema,
  DateFormat$Outbound,
  DateFormat$outboundSchema,
} from "./dateformat.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BudgetSummary = {
  id: string;
  name: string;
  /**
   * The last time any changes were made to the budget from either a web or mobile client
   */
  lastModifiedOn?: Date | undefined;
  /**
   * The earliest budget month
   */
  firstMonth?: RFCDate | undefined;
  /**
   * The latest budget month
   */
  lastMonth?: RFCDate | undefined;
  /**
   * The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
   */
  dateFormat?: DateFormat | null | undefined;
  /**
   * The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
   */
  currencyFormat?: CurrencyFormat | null | undefined;
  /**
   * The budget accounts (only included if `include_accounts=true` specified as query parameter)
   */
  accounts?: Array<Account> | undefined;
};

/** @internal */
export const BudgetSummary$inboundSchema: z.ZodType<
  BudgetSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  last_modified_on: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  first_month: z.string().transform(v => new RFCDate(v)).optional(),
  last_month: z.string().transform(v => new RFCDate(v)).optional(),
  date_format: z.nullable(DateFormat$inboundSchema).optional(),
  currency_format: z.nullable(CurrencyFormat$inboundSchema).optional(),
  accounts: z.array(Account$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "last_modified_on": "lastModifiedOn",
    "first_month": "firstMonth",
    "last_month": "lastMonth",
    "date_format": "dateFormat",
    "currency_format": "currencyFormat",
  });
});

/** @internal */
export type BudgetSummary$Outbound = {
  id: string;
  name: string;
  last_modified_on?: string | undefined;
  first_month?: string | undefined;
  last_month?: string | undefined;
  date_format?: DateFormat$Outbound | null | undefined;
  currency_format?: CurrencyFormat$Outbound | null | undefined;
  accounts?: Array<Account$Outbound> | undefined;
};

/** @internal */
export const BudgetSummary$outboundSchema: z.ZodType<
  BudgetSummary$Outbound,
  z.ZodTypeDef,
  BudgetSummary
> = z.object({
  id: z.string(),
  name: z.string(),
  lastModifiedOn: z.date().transform(v => v.toISOString()).optional(),
  firstMonth: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  lastMonth: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  dateFormat: z.nullable(DateFormat$outboundSchema).optional(),
  currencyFormat: z.nullable(CurrencyFormat$outboundSchema).optional(),
  accounts: z.array(Account$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    lastModifiedOn: "last_modified_on",
    firstMonth: "first_month",
    lastMonth: "last_month",
    dateFormat: "date_format",
    currencyFormat: "currency_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetSummary$ {
  /** @deprecated use `BudgetSummary$inboundSchema` instead. */
  export const inboundSchema = BudgetSummary$inboundSchema;
  /** @deprecated use `BudgetSummary$outboundSchema` instead. */
  export const outboundSchema = BudgetSummary$outboundSchema;
  /** @deprecated use `BudgetSummary$Outbound` instead. */
  export type Outbound = BudgetSummary$Outbound;
}

export function budgetSummaryToJSON(budgetSummary: BudgetSummary): string {
  return JSON.stringify(BudgetSummary$outboundSchema.parse(budgetSummary));
}

export function budgetSummaryFromJSON(
  jsonString: string,
): SafeParseResult<BudgetSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetSummary' from JSON`,
  );
}
