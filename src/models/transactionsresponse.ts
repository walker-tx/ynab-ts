/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionDetail,
  TransactionDetail$inboundSchema,
  TransactionDetail$Outbound,
  TransactionDetail$outboundSchema,
} from "./transactiondetail.js";

export type TransactionsResponseData = {
  transactions: Array<TransactionDetail>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type TransactionsResponse = {
  data: TransactionsResponseData;
};

/** @internal */
export const TransactionsResponseData$inboundSchema: z.ZodType<
  TransactionsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(TransactionDetail$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type TransactionsResponseData$Outbound = {
  transactions: Array<TransactionDetail$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const TransactionsResponseData$outboundSchema: z.ZodType<
  TransactionsResponseData$Outbound,
  z.ZodTypeDef,
  TransactionsResponseData
> = z.object({
  transactions: z.array(TransactionDetail$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsResponseData$ {
  /** @deprecated use `TransactionsResponseData$inboundSchema` instead. */
  export const inboundSchema = TransactionsResponseData$inboundSchema;
  /** @deprecated use `TransactionsResponseData$outboundSchema` instead. */
  export const outboundSchema = TransactionsResponseData$outboundSchema;
  /** @deprecated use `TransactionsResponseData$Outbound` instead. */
  export type Outbound = TransactionsResponseData$Outbound;
}

export function transactionsResponseDataToJSON(
  transactionsResponseData: TransactionsResponseData,
): string {
  return JSON.stringify(
    TransactionsResponseData$outboundSchema.parse(transactionsResponseData),
  );
}

export function transactionsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsResponseData' from JSON`,
  );
}

/** @internal */
export const TransactionsResponse$inboundSchema: z.ZodType<
  TransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => TransactionsResponseData$inboundSchema),
});

/** @internal */
export type TransactionsResponse$Outbound = {
  data: TransactionsResponseData$Outbound;
};

/** @internal */
export const TransactionsResponse$outboundSchema: z.ZodType<
  TransactionsResponse$Outbound,
  z.ZodTypeDef,
  TransactionsResponse
> = z.object({
  data: z.lazy(() => TransactionsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsResponse$ {
  /** @deprecated use `TransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionsResponse$inboundSchema;
  /** @deprecated use `TransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionsResponse$outboundSchema;
  /** @deprecated use `TransactionsResponse$Outbound` instead. */
  export type Outbound = TransactionsResponse$Outbound;
}

export function transactionsResponseToJSON(
  transactionsResponse: TransactionsResponse,
): string {
  return JSON.stringify(
    TransactionsResponse$outboundSchema.parse(transactionsResponse),
  );
}

export function transactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsResponse' from JSON`,
  );
}
