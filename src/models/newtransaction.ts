/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SaveSubTransaction,
  SaveSubTransaction$inboundSchema,
  SaveSubTransaction$Outbound,
  SaveSubTransaction$outboundSchema,
} from "./savesubtransaction.js";
import {
  TransactionClearedStatus,
  TransactionClearedStatus$inboundSchema,
  TransactionClearedStatus$outboundSchema,
} from "./transactionclearedstatus.js";
import {
  TransactionFlagColor,
  TransactionFlagColor$inboundSchema,
  TransactionFlagColor$outboundSchema,
} from "./transactionflagcolor.js";

export type NewTransaction = {
  accountId?: string | undefined;
  /**
   * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
   */
  date?: RFCDate | undefined;
  /**
   * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
   */
  amount?: number | undefined;
  /**
   * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
   */
  payeeId?: string | null | undefined;
  /**
   * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
   */
  payeeName?: string | null | undefined;
  /**
   * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
   */
  categoryId?: string | null | undefined;
  memo?: string | null | undefined;
  /**
   * The cleared status of the transaction
   */
  cleared?: TransactionClearedStatus | undefined;
  /**
   * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
   */
  approved?: boolean | undefined;
  /**
   * The transaction flag
   */
  flagColor?: TransactionFlagColor | null | undefined;
  /**
   * An array of subtransactions to configure a transaction as a split. Updating `subtransactions` on an existing split transaction is not supported.
   */
  subtransactions?: Array<SaveSubTransaction> | undefined;
  /**
   * If specified, a new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transaction on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
   */
  importId?: string | null | undefined;
};

/** @internal */
export const NewTransaction$inboundSchema: z.ZodType<
  NewTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string().optional(),
  date: z.string().transform(v => new RFCDate(v)).optional(),
  amount: z.number().int().optional(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$inboundSchema.optional(),
  approved: z.boolean().optional(),
  flag_color: z.nullable(TransactionFlagColor$inboundSchema).optional(),
  subtransactions: z.array(SaveSubTransaction$inboundSchema).optional(),
  import_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
    "flag_color": "flagColor",
    "import_id": "importId",
  });
});

/** @internal */
export type NewTransaction$Outbound = {
  account_id?: string | undefined;
  date?: string | undefined;
  amount?: number | undefined;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  memo?: string | null | undefined;
  cleared?: string | undefined;
  approved?: boolean | undefined;
  flag_color?: string | null | undefined;
  subtransactions?: Array<SaveSubTransaction$Outbound> | undefined;
  import_id?: string | null | undefined;
};

/** @internal */
export const NewTransaction$outboundSchema: z.ZodType<
  NewTransaction$Outbound,
  z.ZodTypeDef,
  NewTransaction
> = z.object({
  accountId: z.string().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  amount: z.number().int().optional(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$outboundSchema.optional(),
  approved: z.boolean().optional(),
  flagColor: z.nullable(TransactionFlagColor$outboundSchema).optional(),
  subtransactions: z.array(SaveSubTransaction$outboundSchema).optional(),
  importId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
    flagColor: "flag_color",
    importId: "import_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewTransaction$ {
  /** @deprecated use `NewTransaction$inboundSchema` instead. */
  export const inboundSchema = NewTransaction$inboundSchema;
  /** @deprecated use `NewTransaction$outboundSchema` instead. */
  export const outboundSchema = NewTransaction$outboundSchema;
  /** @deprecated use `NewTransaction$Outbound` instead. */
  export type Outbound = NewTransaction$Outbound;
}

export function newTransactionToJSON(newTransaction: NewTransaction): string {
  return JSON.stringify(NewTransaction$outboundSchema.parse(newTransaction));
}

export function newTransactionFromJSON(
  jsonString: string,
): SafeParseResult<NewTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NewTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NewTransaction' from JSON`,
  );
}
