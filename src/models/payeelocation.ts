/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PayeeLocation = {
  id: string;
  payeeId: string;
  latitude: string;
  longitude: string;
  /**
   * Whether or not the payee location has been deleted.  Deleted payee locations will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const PayeeLocation$inboundSchema: z.ZodType<
  PayeeLocation,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  payee_id: z.string(),
  latitude: z.string(),
  longitude: z.string(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "payee_id": "payeeId",
  });
});

/** @internal */
export type PayeeLocation$Outbound = {
  id: string;
  payee_id: string;
  latitude: string;
  longitude: string;
  deleted: boolean;
};

/** @internal */
export const PayeeLocation$outboundSchema: z.ZodType<
  PayeeLocation$Outbound,
  z.ZodTypeDef,
  PayeeLocation
> = z.object({
  id: z.string(),
  payeeId: z.string(),
  latitude: z.string(),
  longitude: z.string(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    payeeId: "payee_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeLocation$ {
  /** @deprecated use `PayeeLocation$inboundSchema` instead. */
  export const inboundSchema = PayeeLocation$inboundSchema;
  /** @deprecated use `PayeeLocation$outboundSchema` instead. */
  export const outboundSchema = PayeeLocation$outboundSchema;
  /** @deprecated use `PayeeLocation$Outbound` instead. */
  export type Outbound = PayeeLocation$Outbound;
}

export function payeeLocationToJSON(payeeLocation: PayeeLocation): string {
  return JSON.stringify(PayeeLocation$outboundSchema.parse(payeeLocation));
}

export function payeeLocationFromJSON(
  jsonString: string,
): SafeParseResult<PayeeLocation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeLocation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeLocation' from JSON`,
  );
}
