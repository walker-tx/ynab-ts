/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Account,
  Account$inboundSchema,
  Account$Outbound,
  Account$outboundSchema,
} from "./account.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AccountsResponseData = {
  accounts: Array<Account>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type AccountsResponse = {
  data: AccountsResponseData;
};

/** @internal */
export const AccountsResponseData$inboundSchema: z.ZodType<
  AccountsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  accounts: z.array(Account$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type AccountsResponseData$Outbound = {
  accounts: Array<Account$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const AccountsResponseData$outboundSchema: z.ZodType<
  AccountsResponseData$Outbound,
  z.ZodTypeDef,
  AccountsResponseData
> = z.object({
  accounts: z.array(Account$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsResponseData$ {
  /** @deprecated use `AccountsResponseData$inboundSchema` instead. */
  export const inboundSchema = AccountsResponseData$inboundSchema;
  /** @deprecated use `AccountsResponseData$outboundSchema` instead. */
  export const outboundSchema = AccountsResponseData$outboundSchema;
  /** @deprecated use `AccountsResponseData$Outbound` instead. */
  export type Outbound = AccountsResponseData$Outbound;
}

export function accountsResponseDataToJSON(
  accountsResponseData: AccountsResponseData,
): string {
  return JSON.stringify(
    AccountsResponseData$outboundSchema.parse(accountsResponseData),
  );
}

export function accountsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AccountsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsResponseData' from JSON`,
  );
}

/** @internal */
export const AccountsResponse$inboundSchema: z.ZodType<
  AccountsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => AccountsResponseData$inboundSchema),
});

/** @internal */
export type AccountsResponse$Outbound = {
  data: AccountsResponseData$Outbound;
};

/** @internal */
export const AccountsResponse$outboundSchema: z.ZodType<
  AccountsResponse$Outbound,
  z.ZodTypeDef,
  AccountsResponse
> = z.object({
  data: z.lazy(() => AccountsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountsResponse$ {
  /** @deprecated use `AccountsResponse$inboundSchema` instead. */
  export const inboundSchema = AccountsResponse$inboundSchema;
  /** @deprecated use `AccountsResponse$outboundSchema` instead. */
  export const outboundSchema = AccountsResponse$outboundSchema;
  /** @deprecated use `AccountsResponse$Outbound` instead. */
  export type Outbound = AccountsResponse$Outbound;
}

export function accountsResponseToJSON(
  accountsResponse: AccountsResponse,
): string {
  return JSON.stringify(
    AccountsResponse$outboundSchema.parse(accountsResponse),
  );
}

export function accountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountsResponse' from JSON`,
  );
}
