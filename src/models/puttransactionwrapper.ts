/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ExistingTransaction,
  ExistingTransaction$inboundSchema,
  ExistingTransaction$Outbound,
  ExistingTransaction$outboundSchema,
} from "./existingtransaction.js";

export type PutTransactionWrapper = {
  transaction: ExistingTransaction;
};

/** @internal */
export const PutTransactionWrapper$inboundSchema: z.ZodType<
  PutTransactionWrapper,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: ExistingTransaction$inboundSchema,
});

/** @internal */
export type PutTransactionWrapper$Outbound = {
  transaction: ExistingTransaction$Outbound;
};

/** @internal */
export const PutTransactionWrapper$outboundSchema: z.ZodType<
  PutTransactionWrapper$Outbound,
  z.ZodTypeDef,
  PutTransactionWrapper
> = z.object({
  transaction: ExistingTransaction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutTransactionWrapper$ {
  /** @deprecated use `PutTransactionWrapper$inboundSchema` instead. */
  export const inboundSchema = PutTransactionWrapper$inboundSchema;
  /** @deprecated use `PutTransactionWrapper$outboundSchema` instead. */
  export const outboundSchema = PutTransactionWrapper$outboundSchema;
  /** @deprecated use `PutTransactionWrapper$Outbound` instead. */
  export type Outbound = PutTransactionWrapper$Outbound;
}

export function putTransactionWrapperToJSON(
  putTransactionWrapper: PutTransactionWrapper,
): string {
  return JSON.stringify(
    PutTransactionWrapper$outboundSchema.parse(putTransactionWrapper),
  );
}

export function putTransactionWrapperFromJSON(
  jsonString: string,
): SafeParseResult<PutTransactionWrapper, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutTransactionWrapper$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutTransactionWrapper' from JSON`,
  );
}
