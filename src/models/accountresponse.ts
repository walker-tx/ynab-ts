/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Account,
  Account$inboundSchema,
  Account$Outbound,
  Account$outboundSchema,
} from "./account.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AccountResponseData = {
  account: Account;
};

export type AccountResponse = {
  data: AccountResponseData;
};

/** @internal */
export const AccountResponseData$inboundSchema: z.ZodType<
  AccountResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  account: Account$inboundSchema,
});

/** @internal */
export type AccountResponseData$Outbound = {
  account: Account$Outbound;
};

/** @internal */
export const AccountResponseData$outboundSchema: z.ZodType<
  AccountResponseData$Outbound,
  z.ZodTypeDef,
  AccountResponseData
> = z.object({
  account: Account$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountResponseData$ {
  /** @deprecated use `AccountResponseData$inboundSchema` instead. */
  export const inboundSchema = AccountResponseData$inboundSchema;
  /** @deprecated use `AccountResponseData$outboundSchema` instead. */
  export const outboundSchema = AccountResponseData$outboundSchema;
  /** @deprecated use `AccountResponseData$Outbound` instead. */
  export type Outbound = AccountResponseData$Outbound;
}

export function accountResponseDataToJSON(
  accountResponseData: AccountResponseData,
): string {
  return JSON.stringify(
    AccountResponseData$outboundSchema.parse(accountResponseData),
  );
}

export function accountResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<AccountResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountResponseData' from JSON`,
  );
}

/** @internal */
export const AccountResponse$inboundSchema: z.ZodType<
  AccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => AccountResponseData$inboundSchema),
});

/** @internal */
export type AccountResponse$Outbound = {
  data: AccountResponseData$Outbound;
};

/** @internal */
export const AccountResponse$outboundSchema: z.ZodType<
  AccountResponse$Outbound,
  z.ZodTypeDef,
  AccountResponse
> = z.object({
  data: z.lazy(() => AccountResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountResponse$ {
  /** @deprecated use `AccountResponse$inboundSchema` instead. */
  export const inboundSchema = AccountResponse$inboundSchema;
  /** @deprecated use `AccountResponse$outboundSchema` instead. */
  export const outboundSchema = AccountResponse$outboundSchema;
  /** @deprecated use `AccountResponse$Outbound` instead. */
  export type Outbound = AccountResponse$Outbound;
}

export function accountResponseToJSON(
  accountResponse: AccountResponse,
): string {
  return JSON.stringify(AccountResponse$outboundSchema.parse(accountResponse));
}

export function accountResponseFromJSON(
  jsonString: string,
): SafeParseResult<AccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountResponse' from JSON`,
  );
}
