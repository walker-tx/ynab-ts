/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  NewTransaction,
  NewTransaction$inboundSchema,
  NewTransaction$Outbound,
  NewTransaction$outboundSchema,
} from "./newtransaction.js";

export type PostTransactionsWrapper = {
  transaction?: NewTransaction | undefined;
  transactions?: Array<NewTransaction> | undefined;
};

/** @internal */
export const PostTransactionsWrapper$inboundSchema: z.ZodType<
  PostTransactionsWrapper,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: NewTransaction$inboundSchema.optional(),
  transactions: z.array(NewTransaction$inboundSchema).optional(),
});

/** @internal */
export type PostTransactionsWrapper$Outbound = {
  transaction?: NewTransaction$Outbound | undefined;
  transactions?: Array<NewTransaction$Outbound> | undefined;
};

/** @internal */
export const PostTransactionsWrapper$outboundSchema: z.ZodType<
  PostTransactionsWrapper$Outbound,
  z.ZodTypeDef,
  PostTransactionsWrapper
> = z.object({
  transaction: NewTransaction$outboundSchema.optional(),
  transactions: z.array(NewTransaction$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostTransactionsWrapper$ {
  /** @deprecated use `PostTransactionsWrapper$inboundSchema` instead. */
  export const inboundSchema = PostTransactionsWrapper$inboundSchema;
  /** @deprecated use `PostTransactionsWrapper$outboundSchema` instead. */
  export const outboundSchema = PostTransactionsWrapper$outboundSchema;
  /** @deprecated use `PostTransactionsWrapper$Outbound` instead. */
  export type Outbound = PostTransactionsWrapper$Outbound;
}

export function postTransactionsWrapperToJSON(
  postTransactionsWrapper: PostTransactionsWrapper,
): string {
  return JSON.stringify(
    PostTransactionsWrapper$outboundSchema.parse(postTransactionsWrapper),
  );
}

export function postTransactionsWrapperFromJSON(
  jsonString: string,
): SafeParseResult<PostTransactionsWrapper, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostTransactionsWrapper$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostTransactionsWrapper' from JSON`,
  );
}
