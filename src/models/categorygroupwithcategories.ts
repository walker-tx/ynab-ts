/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Category,
  Category$inboundSchema,
  Category$Outbound,
  Category$outboundSchema,
} from "./category.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CategoryGroupWithCategories = {
  id: string;
  name: string;
  /**
   * Whether or not the category group is hidden
   */
  hidden: boolean;
  /**
   * Whether or not the category group has been deleted.  Deleted category groups will only be included in delta requests.
   */
  deleted: boolean;
  /**
   * Category group categories.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
   */
  categories: Array<Category>;
};

/** @internal */
export const CategoryGroupWithCategories$inboundSchema: z.ZodType<
  CategoryGroupWithCategories,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  hidden: z.boolean(),
  deleted: z.boolean(),
  categories: z.array(Category$inboundSchema),
});

/** @internal */
export type CategoryGroupWithCategories$Outbound = {
  id: string;
  name: string;
  hidden: boolean;
  deleted: boolean;
  categories: Array<Category$Outbound>;
};

/** @internal */
export const CategoryGroupWithCategories$outboundSchema: z.ZodType<
  CategoryGroupWithCategories$Outbound,
  z.ZodTypeDef,
  CategoryGroupWithCategories
> = z.object({
  id: z.string(),
  name: z.string(),
  hidden: z.boolean(),
  deleted: z.boolean(),
  categories: z.array(Category$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryGroupWithCategories$ {
  /** @deprecated use `CategoryGroupWithCategories$inboundSchema` instead. */
  export const inboundSchema = CategoryGroupWithCategories$inboundSchema;
  /** @deprecated use `CategoryGroupWithCategories$outboundSchema` instead. */
  export const outboundSchema = CategoryGroupWithCategories$outboundSchema;
  /** @deprecated use `CategoryGroupWithCategories$Outbound` instead. */
  export type Outbound = CategoryGroupWithCategories$Outbound;
}

export function categoryGroupWithCategoriesToJSON(
  categoryGroupWithCategories: CategoryGroupWithCategories,
): string {
  return JSON.stringify(
    CategoryGroupWithCategories$outboundSchema.parse(
      categoryGroupWithCategories,
    ),
  );
}

export function categoryGroupWithCategoriesFromJSON(
  jsonString: string,
): SafeParseResult<CategoryGroupWithCategories, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryGroupWithCategories$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryGroupWithCategories' from JSON`,
  );
}
