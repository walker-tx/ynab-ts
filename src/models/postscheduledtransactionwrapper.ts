/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SaveScheduledTransaction,
  SaveScheduledTransaction$inboundSchema,
  SaveScheduledTransaction$Outbound,
  SaveScheduledTransaction$outboundSchema,
} from "./savescheduledtransaction.js";

export type PostScheduledTransactionWrapper = {
  scheduledTransaction: SaveScheduledTransaction;
};

/** @internal */
export const PostScheduledTransactionWrapper$inboundSchema: z.ZodType<
  PostScheduledTransactionWrapper,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduled_transaction: SaveScheduledTransaction$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "scheduled_transaction": "scheduledTransaction",
  });
});

/** @internal */
export type PostScheduledTransactionWrapper$Outbound = {
  scheduled_transaction: SaveScheduledTransaction$Outbound;
};

/** @internal */
export const PostScheduledTransactionWrapper$outboundSchema: z.ZodType<
  PostScheduledTransactionWrapper$Outbound,
  z.ZodTypeDef,
  PostScheduledTransactionWrapper
> = z.object({
  scheduledTransaction: SaveScheduledTransaction$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    scheduledTransaction: "scheduled_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostScheduledTransactionWrapper$ {
  /** @deprecated use `PostScheduledTransactionWrapper$inboundSchema` instead. */
  export const inboundSchema = PostScheduledTransactionWrapper$inboundSchema;
  /** @deprecated use `PostScheduledTransactionWrapper$outboundSchema` instead. */
  export const outboundSchema = PostScheduledTransactionWrapper$outboundSchema;
  /** @deprecated use `PostScheduledTransactionWrapper$Outbound` instead. */
  export type Outbound = PostScheduledTransactionWrapper$Outbound;
}

export function postScheduledTransactionWrapperToJSON(
  postScheduledTransactionWrapper: PostScheduledTransactionWrapper,
): string {
  return JSON.stringify(
    PostScheduledTransactionWrapper$outboundSchema.parse(
      postScheduledTransactionWrapper,
    ),
  );
}

export function postScheduledTransactionWrapperFromJSON(
  jsonString: string,
): SafeParseResult<PostScheduledTransactionWrapper, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostScheduledTransactionWrapper$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostScheduledTransactionWrapper' from JSON`,
  );
}
