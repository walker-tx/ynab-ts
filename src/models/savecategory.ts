/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SaveCategory = {
  name?: string | null | undefined;
  note?: string | null | undefined;
  categoryGroupId?: string | undefined;
  /**
   * The goal target amount in milliunits format.  This amount can only be changed if the category already has a configured goal (goal_type != null).
   */
  goalTarget?: number | null | undefined;
};

/** @internal */
export const SaveCategory$inboundSchema: z.ZodType<
  SaveCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  category_group_id: z.string().optional(),
  goal_target: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "category_group_id": "categoryGroupId",
    "goal_target": "goalTarget",
  });
});

/** @internal */
export type SaveCategory$Outbound = {
  name?: string | null | undefined;
  note?: string | null | undefined;
  category_group_id?: string | undefined;
  goal_target?: number | null | undefined;
};

/** @internal */
export const SaveCategory$outboundSchema: z.ZodType<
  SaveCategory$Outbound,
  z.ZodTypeDef,
  SaveCategory
> = z.object({
  name: z.nullable(z.string()).optional(),
  note: z.nullable(z.string()).optional(),
  categoryGroupId: z.string().optional(),
  goalTarget: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    categoryGroupId: "category_group_id",
    goalTarget: "goal_target",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveCategory$ {
  /** @deprecated use `SaveCategory$inboundSchema` instead. */
  export const inboundSchema = SaveCategory$inboundSchema;
  /** @deprecated use `SaveCategory$outboundSchema` instead. */
  export const outboundSchema = SaveCategory$outboundSchema;
  /** @deprecated use `SaveCategory$Outbound` instead. */
  export type Outbound = SaveCategory$Outbound;
}

export function saveCategoryToJSON(saveCategory: SaveCategory): string {
  return JSON.stringify(SaveCategory$outboundSchema.parse(saveCategory));
}

export function saveCategoryFromJSON(
  jsonString: string,
): SafeParseResult<SaveCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveCategory' from JSON`,
  );
}
