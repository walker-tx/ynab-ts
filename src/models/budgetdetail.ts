/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import {
  Account,
  Account$inboundSchema,
  Account$Outbound,
  Account$outboundSchema,
} from "./account.js";
import {
  Category,
  Category$inboundSchema,
  Category$Outbound,
  Category$outboundSchema,
} from "./category.js";
import {
  CategoryGroup,
  CategoryGroup$inboundSchema,
  CategoryGroup$Outbound,
  CategoryGroup$outboundSchema,
} from "./categorygroup.js";
import {
  CurrencyFormat,
  CurrencyFormat$inboundSchema,
  CurrencyFormat$Outbound,
  CurrencyFormat$outboundSchema,
} from "./currencyformat.js";
import {
  DateFormat,
  DateFormat$inboundSchema,
  DateFormat$Outbound,
  DateFormat$outboundSchema,
} from "./dateformat.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MonthDetail,
  MonthDetail$inboundSchema,
  MonthDetail$Outbound,
  MonthDetail$outboundSchema,
} from "./monthdetail.js";
import {
  Payee,
  Payee$inboundSchema,
  Payee$Outbound,
  Payee$outboundSchema,
} from "./payee.js";
import {
  PayeeLocation,
  PayeeLocation$inboundSchema,
  PayeeLocation$Outbound,
  PayeeLocation$outboundSchema,
} from "./payeelocation.js";
import {
  ScheduledSubTransaction,
  ScheduledSubTransaction$inboundSchema,
  ScheduledSubTransaction$Outbound,
  ScheduledSubTransaction$outboundSchema,
} from "./scheduledsubtransaction.js";
import {
  ScheduledTransactionSummary,
  ScheduledTransactionSummary$inboundSchema,
  ScheduledTransactionSummary$Outbound,
  ScheduledTransactionSummary$outboundSchema,
} from "./scheduledtransactionsummary.js";
import {
  SubTransaction,
  SubTransaction$inboundSchema,
  SubTransaction$Outbound,
  SubTransaction$outboundSchema,
} from "./subtransaction.js";
import {
  TransactionSummary,
  TransactionSummary$inboundSchema,
  TransactionSummary$Outbound,
  TransactionSummary$outboundSchema,
} from "./transactionsummary.js";

export type BudgetDetail = {
  id: string;
  name: string;
  /**
   * The last time any changes were made to the budget from either a web or mobile client
   */
  lastModifiedOn?: Date | undefined;
  /**
   * The earliest budget month
   */
  firstMonth?: RFCDate | undefined;
  /**
   * The latest budget month
   */
  lastMonth?: RFCDate | undefined;
  /**
   * The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
   */
  dateFormat?: DateFormat | null | undefined;
  /**
   * The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
   */
  currencyFormat?: CurrencyFormat | null | undefined;
  accounts?: Array<Account> | undefined;
  payees?: Array<Payee> | undefined;
  payeeLocations?: Array<PayeeLocation> | undefined;
  categoryGroups?: Array<CategoryGroup> | undefined;
  categories?: Array<Category> | undefined;
  months?: Array<MonthDetail> | undefined;
  transactions?: Array<TransactionSummary> | undefined;
  subtransactions?: Array<SubTransaction> | undefined;
  scheduledTransactions?: Array<ScheduledTransactionSummary> | undefined;
  scheduledSubtransactions?: Array<ScheduledSubTransaction> | undefined;
};

/** @internal */
export const BudgetDetail$inboundSchema: z.ZodType<
  BudgetDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  last_modified_on: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  first_month: z.string().transform(v => new RFCDate(v)).optional(),
  last_month: z.string().transform(v => new RFCDate(v)).optional(),
  date_format: z.nullable(DateFormat$inboundSchema).optional(),
  currency_format: z.nullable(CurrencyFormat$inboundSchema).optional(),
  accounts: z.array(Account$inboundSchema).optional(),
  payees: z.array(Payee$inboundSchema).optional(),
  payee_locations: z.array(PayeeLocation$inboundSchema).optional(),
  category_groups: z.array(CategoryGroup$inboundSchema).optional(),
  categories: z.array(Category$inboundSchema).optional(),
  months: z.array(MonthDetail$inboundSchema).optional(),
  transactions: z.array(TransactionSummary$inboundSchema).optional(),
  subtransactions: z.array(SubTransaction$inboundSchema).optional(),
  scheduled_transactions: z.array(ScheduledTransactionSummary$inboundSchema)
    .optional(),
  scheduled_subtransactions: z.array(ScheduledSubTransaction$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "last_modified_on": "lastModifiedOn",
    "first_month": "firstMonth",
    "last_month": "lastMonth",
    "date_format": "dateFormat",
    "currency_format": "currencyFormat",
    "payee_locations": "payeeLocations",
    "category_groups": "categoryGroups",
    "scheduled_transactions": "scheduledTransactions",
    "scheduled_subtransactions": "scheduledSubtransactions",
  });
});

/** @internal */
export type BudgetDetail$Outbound = {
  id: string;
  name: string;
  last_modified_on?: string | undefined;
  first_month?: string | undefined;
  last_month?: string | undefined;
  date_format?: DateFormat$Outbound | null | undefined;
  currency_format?: CurrencyFormat$Outbound | null | undefined;
  accounts?: Array<Account$Outbound> | undefined;
  payees?: Array<Payee$Outbound> | undefined;
  payee_locations?: Array<PayeeLocation$Outbound> | undefined;
  category_groups?: Array<CategoryGroup$Outbound> | undefined;
  categories?: Array<Category$Outbound> | undefined;
  months?: Array<MonthDetail$Outbound> | undefined;
  transactions?: Array<TransactionSummary$Outbound> | undefined;
  subtransactions?: Array<SubTransaction$Outbound> | undefined;
  scheduled_transactions?:
    | Array<ScheduledTransactionSummary$Outbound>
    | undefined;
  scheduled_subtransactions?:
    | Array<ScheduledSubTransaction$Outbound>
    | undefined;
};

/** @internal */
export const BudgetDetail$outboundSchema: z.ZodType<
  BudgetDetail$Outbound,
  z.ZodTypeDef,
  BudgetDetail
> = z.object({
  id: z.string(),
  name: z.string(),
  lastModifiedOn: z.date().transform(v => v.toISOString()).optional(),
  firstMonth: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  lastMonth: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  dateFormat: z.nullable(DateFormat$outboundSchema).optional(),
  currencyFormat: z.nullable(CurrencyFormat$outboundSchema).optional(),
  accounts: z.array(Account$outboundSchema).optional(),
  payees: z.array(Payee$outboundSchema).optional(),
  payeeLocations: z.array(PayeeLocation$outboundSchema).optional(),
  categoryGroups: z.array(CategoryGroup$outboundSchema).optional(),
  categories: z.array(Category$outboundSchema).optional(),
  months: z.array(MonthDetail$outboundSchema).optional(),
  transactions: z.array(TransactionSummary$outboundSchema).optional(),
  subtransactions: z.array(SubTransaction$outboundSchema).optional(),
  scheduledTransactions: z.array(ScheduledTransactionSummary$outboundSchema)
    .optional(),
  scheduledSubtransactions: z.array(ScheduledSubTransaction$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    lastModifiedOn: "last_modified_on",
    firstMonth: "first_month",
    lastMonth: "last_month",
    dateFormat: "date_format",
    currencyFormat: "currency_format",
    payeeLocations: "payee_locations",
    categoryGroups: "category_groups",
    scheduledTransactions: "scheduled_transactions",
    scheduledSubtransactions: "scheduled_subtransactions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetDetail$ {
  /** @deprecated use `BudgetDetail$inboundSchema` instead. */
  export const inboundSchema = BudgetDetail$inboundSchema;
  /** @deprecated use `BudgetDetail$outboundSchema` instead. */
  export const outboundSchema = BudgetDetail$outboundSchema;
  /** @deprecated use `BudgetDetail$Outbound` instead. */
  export type Outbound = BudgetDetail$Outbound;
}

export function budgetDetailToJSON(budgetDetail: BudgetDetail): string {
  return JSON.stringify(BudgetDetail$outboundSchema.parse(budgetDetail));
}

export function budgetDetailFromJSON(
  jsonString: string,
): SafeParseResult<BudgetDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetDetail' from JSON`,
  );
}
