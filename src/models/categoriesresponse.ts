/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CategoryGroupWithCategories,
  CategoryGroupWithCategories$inboundSchema,
  CategoryGroupWithCategories$Outbound,
  CategoryGroupWithCategories$outboundSchema,
} from "./categorygroupwithcategories.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CategoriesResponseData = {
  categoryGroups: Array<CategoryGroupWithCategories>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type CategoriesResponse = {
  data: CategoriesResponseData;
};

/** @internal */
export const CategoriesResponseData$inboundSchema: z.ZodType<
  CategoriesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  category_groups: z.array(CategoryGroupWithCategories$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "category_groups": "categoryGroups",
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type CategoriesResponseData$Outbound = {
  category_groups: Array<CategoryGroupWithCategories$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const CategoriesResponseData$outboundSchema: z.ZodType<
  CategoriesResponseData$Outbound,
  z.ZodTypeDef,
  CategoriesResponseData
> = z.object({
  categoryGroups: z.array(CategoryGroupWithCategories$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    categoryGroups: "category_groups",
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoriesResponseData$ {
  /** @deprecated use `CategoriesResponseData$inboundSchema` instead. */
  export const inboundSchema = CategoriesResponseData$inboundSchema;
  /** @deprecated use `CategoriesResponseData$outboundSchema` instead. */
  export const outboundSchema = CategoriesResponseData$outboundSchema;
  /** @deprecated use `CategoriesResponseData$Outbound` instead. */
  export type Outbound = CategoriesResponseData$Outbound;
}

export function categoriesResponseDataToJSON(
  categoriesResponseData: CategoriesResponseData,
): string {
  return JSON.stringify(
    CategoriesResponseData$outboundSchema.parse(categoriesResponseData),
  );
}

export function categoriesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<CategoriesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoriesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoriesResponseData' from JSON`,
  );
}

/** @internal */
export const CategoriesResponse$inboundSchema: z.ZodType<
  CategoriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CategoriesResponseData$inboundSchema),
});

/** @internal */
export type CategoriesResponse$Outbound = {
  data: CategoriesResponseData$Outbound;
};

/** @internal */
export const CategoriesResponse$outboundSchema: z.ZodType<
  CategoriesResponse$Outbound,
  z.ZodTypeDef,
  CategoriesResponse
> = z.object({
  data: z.lazy(() => CategoriesResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoriesResponse$ {
  /** @deprecated use `CategoriesResponse$inboundSchema` instead. */
  export const inboundSchema = CategoriesResponse$inboundSchema;
  /** @deprecated use `CategoriesResponse$outboundSchema` instead. */
  export const outboundSchema = CategoriesResponse$outboundSchema;
  /** @deprecated use `CategoriesResponse$Outbound` instead. */
  export type Outbound = CategoriesResponse$Outbound;
}

export function categoriesResponseToJSON(
  categoriesResponse: CategoriesResponse,
): string {
  return JSON.stringify(
    CategoriesResponse$outboundSchema.parse(categoriesResponse),
  );
}

export function categoriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<CategoriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoriesResponse' from JSON`,
  );
}
