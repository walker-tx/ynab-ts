/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SaveSubTransaction,
  SaveSubTransaction$inboundSchema,
  SaveSubTransaction$Outbound,
  SaveSubTransaction$outboundSchema,
} from "./savesubtransaction.js";
import {
  TransactionClearedStatus,
  TransactionClearedStatus$inboundSchema,
  TransactionClearedStatus$outboundSchema,
} from "./transactionclearedstatus.js";
import {
  TransactionFlagColor,
  TransactionFlagColor$inboundSchema,
  TransactionFlagColor$outboundSchema,
} from "./transactionflagcolor.js";

export type SaveTransactionWithIdOrImportId = {
  /**
   * If specified, this id will be used to lookup a transaction by its `id` for the purpose of updating the transaction itself. If not specified, an `import_id` should be supplied.
   */
  id?: string | null | undefined;
  /**
   * If specified, this id will be used to lookup a transaction by its `import_id` for the purpose of updating the transaction itself. If not specified, an `id` should be supplied.  You may not provide both an `id` and an `import_id` and updating an `import_id` on an existing transaction is not allowed.
   */
  importId?: string | null | undefined;
  accountId?: string | undefined;
  /**
   * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
   */
  date?: RFCDate | undefined;
  /**
   * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
   */
  amount?: number | undefined;
  /**
   * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
   */
  payeeId?: string | null | undefined;
  /**
   * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
   */
  payeeName?: string | null | undefined;
  /**
   * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
   */
  categoryId?: string | null | undefined;
  memo?: string | null | undefined;
  /**
   * The cleared status of the transaction
   */
  cleared?: TransactionClearedStatus | undefined;
  /**
   * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
   */
  approved?: boolean | undefined;
  /**
   * The transaction flag
   */
  flagColor?: TransactionFlagColor | null | undefined;
  /**
   * An array of subtransactions to configure a transaction as a split. Updating `subtransactions` on an existing split transaction is not supported.
   */
  subtransactions?: Array<SaveSubTransaction> | undefined;
};

/** @internal */
export const SaveTransactionWithIdOrImportId$inboundSchema: z.ZodType<
  SaveTransactionWithIdOrImportId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  import_id: z.nullable(z.string()).optional(),
  account_id: z.string().optional(),
  date: z.string().transform(v => new RFCDate(v)).optional(),
  amount: z.number().int().optional(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$inboundSchema.optional(),
  approved: z.boolean().optional(),
  flag_color: z.nullable(TransactionFlagColor$inboundSchema).optional(),
  subtransactions: z.array(SaveSubTransaction$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "import_id": "importId",
    "account_id": "accountId",
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
    "flag_color": "flagColor",
  });
});

/** @internal */
export type SaveTransactionWithIdOrImportId$Outbound = {
  id?: string | null | undefined;
  import_id?: string | null | undefined;
  account_id?: string | undefined;
  date?: string | undefined;
  amount?: number | undefined;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  memo?: string | null | undefined;
  cleared?: string | undefined;
  approved?: boolean | undefined;
  flag_color?: string | null | undefined;
  subtransactions?: Array<SaveSubTransaction$Outbound> | undefined;
};

/** @internal */
export const SaveTransactionWithIdOrImportId$outboundSchema: z.ZodType<
  SaveTransactionWithIdOrImportId$Outbound,
  z.ZodTypeDef,
  SaveTransactionWithIdOrImportId
> = z.object({
  id: z.nullable(z.string()).optional(),
  importId: z.nullable(z.string()).optional(),
  accountId: z.string().optional(),
  date: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  amount: z.number().int().optional(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$outboundSchema.optional(),
  approved: z.boolean().optional(),
  flagColor: z.nullable(TransactionFlagColor$outboundSchema).optional(),
  subtransactions: z.array(SaveSubTransaction$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    importId: "import_id",
    accountId: "account_id",
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
    flagColor: "flag_color",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveTransactionWithIdOrImportId$ {
  /** @deprecated use `SaveTransactionWithIdOrImportId$inboundSchema` instead. */
  export const inboundSchema = SaveTransactionWithIdOrImportId$inboundSchema;
  /** @deprecated use `SaveTransactionWithIdOrImportId$outboundSchema` instead. */
  export const outboundSchema = SaveTransactionWithIdOrImportId$outboundSchema;
  /** @deprecated use `SaveTransactionWithIdOrImportId$Outbound` instead. */
  export type Outbound = SaveTransactionWithIdOrImportId$Outbound;
}

export function saveTransactionWithIdOrImportIdToJSON(
  saveTransactionWithIdOrImportId: SaveTransactionWithIdOrImportId,
): string {
  return JSON.stringify(
    SaveTransactionWithIdOrImportId$outboundSchema.parse(
      saveTransactionWithIdOrImportId,
    ),
  );
}

export function saveTransactionWithIdOrImportIdFromJSON(
  jsonString: string,
): SafeParseResult<SaveTransactionWithIdOrImportId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveTransactionWithIdOrImportId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveTransactionWithIdOrImportId' from JSON`,
  );
}
