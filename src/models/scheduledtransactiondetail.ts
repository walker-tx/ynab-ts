/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ScheduledSubTransaction,
  ScheduledSubTransaction$inboundSchema,
  ScheduledSubTransaction$Outbound,
  ScheduledSubTransaction$outboundSchema,
} from "./scheduledsubtransaction.js";
import {
  TransactionFlagColor,
  TransactionFlagColor$inboundSchema,
  TransactionFlagColor$outboundSchema,
} from "./transactionflagcolor.js";

export const ScheduledTransactionDetailFrequency = {
  Never: "never",
  Daily: "daily",
  Weekly: "weekly",
  EveryOtherWeek: "everyOtherWeek",
  TwiceAMonth: "twiceAMonth",
  Every4Weeks: "every4Weeks",
  Monthly: "monthly",
  EveryOtherMonth: "everyOtherMonth",
  Every3Months: "every3Months",
  Every4Months: "every4Months",
  TwiceAYear: "twiceAYear",
  Yearly: "yearly",
  EveryOtherYear: "everyOtherYear",
} as const;
export type ScheduledTransactionDetailFrequency = ClosedEnum<
  typeof ScheduledTransactionDetailFrequency
>;

export type ScheduledTransactionDetail = {
  id: string;
  /**
   * The first date for which the Scheduled Transaction was scheduled.
   */
  dateFirst: RFCDate;
  /**
   * The next date for which the Scheduled Transaction is scheduled.
   */
  dateNext: RFCDate;
  frequency: ScheduledTransactionDetailFrequency;
  /**
   * The scheduled transaction amount in milliunits format
   */
  amount: number;
  memo?: string | null | undefined;
  /**
   * The transaction flag
   */
  flagColor?: TransactionFlagColor | null | undefined;
  /**
   * The customized name of a transaction flag
   */
  flagName?: string | null | undefined;
  accountId: string;
  payeeId?: string | null | undefined;
  categoryId?: string | null | undefined;
  /**
   * If a transfer, the account_id which the scheduled transaction transfers to
   */
  transferAccountId?: string | null | undefined;
  /**
   * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
   */
  deleted: boolean;
  accountName: string;
  payeeName?: string | null | undefined;
  /**
   * The name of the category.  If a split scheduled transaction, this will be 'Split'.
   */
  categoryName?: string | null | undefined;
  /**
   * If a split scheduled transaction, the subtransactions.
   */
  subtransactions: Array<ScheduledSubTransaction>;
};

/** @internal */
export const ScheduledTransactionDetailFrequency$inboundSchema: z.ZodNativeEnum<
  typeof ScheduledTransactionDetailFrequency
> = z.nativeEnum(ScheduledTransactionDetailFrequency);

/** @internal */
export const ScheduledTransactionDetailFrequency$outboundSchema:
  z.ZodNativeEnum<typeof ScheduledTransactionDetailFrequency> =
    ScheduledTransactionDetailFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionDetailFrequency$ {
  /** @deprecated use `ScheduledTransactionDetailFrequency$inboundSchema` instead. */
  export const inboundSchema =
    ScheduledTransactionDetailFrequency$inboundSchema;
  /** @deprecated use `ScheduledTransactionDetailFrequency$outboundSchema` instead. */
  export const outboundSchema =
    ScheduledTransactionDetailFrequency$outboundSchema;
}

/** @internal */
export const ScheduledTransactionDetail$inboundSchema: z.ZodType<
  ScheduledTransactionDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  date_first: z.string().transform(v => new RFCDate(v)),
  date_next: z.string().transform(v => new RFCDate(v)),
  frequency: ScheduledTransactionDetailFrequency$inboundSchema,
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  flag_color: z.nullable(TransactionFlagColor$inboundSchema).optional(),
  flag_name: z.nullable(z.string()).optional(),
  account_id: z.string(),
  payee_id: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  transfer_account_id: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
  account_name: z.string(),
  payee_name: z.nullable(z.string()).optional(),
  category_name: z.nullable(z.string()).optional(),
  subtransactions: z.array(ScheduledSubTransaction$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "date_first": "dateFirst",
    "date_next": "dateNext",
    "flag_color": "flagColor",
    "flag_name": "flagName",
    "account_id": "accountId",
    "payee_id": "payeeId",
    "category_id": "categoryId",
    "transfer_account_id": "transferAccountId",
    "account_name": "accountName",
    "payee_name": "payeeName",
    "category_name": "categoryName",
  });
});

/** @internal */
export type ScheduledTransactionDetail$Outbound = {
  id: string;
  date_first: string;
  date_next: string;
  frequency: string;
  amount: number;
  memo?: string | null | undefined;
  flag_color?: string | null | undefined;
  flag_name?: string | null | undefined;
  account_id: string;
  payee_id?: string | null | undefined;
  category_id?: string | null | undefined;
  transfer_account_id?: string | null | undefined;
  deleted: boolean;
  account_name: string;
  payee_name?: string | null | undefined;
  category_name?: string | null | undefined;
  subtransactions: Array<ScheduledSubTransaction$Outbound>;
};

/** @internal */
export const ScheduledTransactionDetail$outboundSchema: z.ZodType<
  ScheduledTransactionDetail$Outbound,
  z.ZodTypeDef,
  ScheduledTransactionDetail
> = z.object({
  id: z.string(),
  dateFirst: z.instanceof(RFCDate).transform(v => v.toString()),
  dateNext: z.instanceof(RFCDate).transform(v => v.toString()),
  frequency: ScheduledTransactionDetailFrequency$outboundSchema,
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  flagColor: z.nullable(TransactionFlagColor$outboundSchema).optional(),
  flagName: z.nullable(z.string()).optional(),
  accountId: z.string(),
  payeeId: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  transferAccountId: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
  accountName: z.string(),
  payeeName: z.nullable(z.string()).optional(),
  categoryName: z.nullable(z.string()).optional(),
  subtransactions: z.array(ScheduledSubTransaction$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    dateFirst: "date_first",
    dateNext: "date_next",
    flagColor: "flag_color",
    flagName: "flag_name",
    accountId: "account_id",
    payeeId: "payee_id",
    categoryId: "category_id",
    transferAccountId: "transfer_account_id",
    accountName: "account_name",
    payeeName: "payee_name",
    categoryName: "category_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionDetail$ {
  /** @deprecated use `ScheduledTransactionDetail$inboundSchema` instead. */
  export const inboundSchema = ScheduledTransactionDetail$inboundSchema;
  /** @deprecated use `ScheduledTransactionDetail$outboundSchema` instead. */
  export const outboundSchema = ScheduledTransactionDetail$outboundSchema;
  /** @deprecated use `ScheduledTransactionDetail$Outbound` instead. */
  export type Outbound = ScheduledTransactionDetail$Outbound;
}

export function scheduledTransactionDetailToJSON(
  scheduledTransactionDetail: ScheduledTransactionDetail,
): string {
  return JSON.stringify(
    ScheduledTransactionDetail$outboundSchema.parse(scheduledTransactionDetail),
  );
}

export function scheduledTransactionDetailFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledTransactionDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledTransactionDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledTransactionDetail' from JSON`,
  );
}
