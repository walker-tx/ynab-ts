/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The currency format setting for the budget.  In some cases the format will not be available and will be specified as null.
 */
export type CurrencyFormat = {
  isoCode: string;
  exampleFormat: string;
  decimalDigits: number;
  decimalSeparator: string;
  symbolFirst: boolean;
  groupSeparator: string;
  currencySymbol: string;
  displaySymbol: boolean;
};

/** @internal */
export const CurrencyFormat$inboundSchema: z.ZodType<
  CurrencyFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  iso_code: z.string(),
  example_format: z.string(),
  decimal_digits: z.number().int(),
  decimal_separator: z.string(),
  symbol_first: z.boolean(),
  group_separator: z.string(),
  currency_symbol: z.string(),
  display_symbol: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "iso_code": "isoCode",
    "example_format": "exampleFormat",
    "decimal_digits": "decimalDigits",
    "decimal_separator": "decimalSeparator",
    "symbol_first": "symbolFirst",
    "group_separator": "groupSeparator",
    "currency_symbol": "currencySymbol",
    "display_symbol": "displaySymbol",
  });
});

/** @internal */
export type CurrencyFormat$Outbound = {
  iso_code: string;
  example_format: string;
  decimal_digits: number;
  decimal_separator: string;
  symbol_first: boolean;
  group_separator: string;
  currency_symbol: string;
  display_symbol: boolean;
};

/** @internal */
export const CurrencyFormat$outboundSchema: z.ZodType<
  CurrencyFormat$Outbound,
  z.ZodTypeDef,
  CurrencyFormat
> = z.object({
  isoCode: z.string(),
  exampleFormat: z.string(),
  decimalDigits: z.number().int(),
  decimalSeparator: z.string(),
  symbolFirst: z.boolean(),
  groupSeparator: z.string(),
  currencySymbol: z.string(),
  displaySymbol: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    isoCode: "iso_code",
    exampleFormat: "example_format",
    decimalDigits: "decimal_digits",
    decimalSeparator: "decimal_separator",
    symbolFirst: "symbol_first",
    groupSeparator: "group_separator",
    currencySymbol: "currency_symbol",
    displaySymbol: "display_symbol",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrencyFormat$ {
  /** @deprecated use `CurrencyFormat$inboundSchema` instead. */
  export const inboundSchema = CurrencyFormat$inboundSchema;
  /** @deprecated use `CurrencyFormat$outboundSchema` instead. */
  export const outboundSchema = CurrencyFormat$outboundSchema;
  /** @deprecated use `CurrencyFormat$Outbound` instead. */
  export type Outbound = CurrencyFormat$Outbound;
}

export function currencyFormatToJSON(currencyFormat: CurrencyFormat): string {
  return JSON.stringify(CurrencyFormat$outboundSchema.parse(currencyFormat));
}

export function currencyFormatFromJSON(
  jsonString: string,
): SafeParseResult<CurrencyFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrencyFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrencyFormat' from JSON`,
  );
}
