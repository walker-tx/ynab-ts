/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SaveTransactionWithIdOrImportId,
  SaveTransactionWithIdOrImportId$inboundSchema,
  SaveTransactionWithIdOrImportId$Outbound,
  SaveTransactionWithIdOrImportId$outboundSchema,
} from "./savetransactionwithidorimportid.js";

export type PatchTransactionsWrapper = {
  transactions: Array<SaveTransactionWithIdOrImportId>;
};

/** @internal */
export const PatchTransactionsWrapper$inboundSchema: z.ZodType<
  PatchTransactionsWrapper,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(SaveTransactionWithIdOrImportId$inboundSchema),
});

/** @internal */
export type PatchTransactionsWrapper$Outbound = {
  transactions: Array<SaveTransactionWithIdOrImportId$Outbound>;
};

/** @internal */
export const PatchTransactionsWrapper$outboundSchema: z.ZodType<
  PatchTransactionsWrapper$Outbound,
  z.ZodTypeDef,
  PatchTransactionsWrapper
> = z.object({
  transactions: z.array(SaveTransactionWithIdOrImportId$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchTransactionsWrapper$ {
  /** @deprecated use `PatchTransactionsWrapper$inboundSchema` instead. */
  export const inboundSchema = PatchTransactionsWrapper$inboundSchema;
  /** @deprecated use `PatchTransactionsWrapper$outboundSchema` instead. */
  export const outboundSchema = PatchTransactionsWrapper$outboundSchema;
  /** @deprecated use `PatchTransactionsWrapper$Outbound` instead. */
  export type Outbound = PatchTransactionsWrapper$Outbound;
}

export function patchTransactionsWrapperToJSON(
  patchTransactionsWrapper: PatchTransactionsWrapper,
): string {
  return JSON.stringify(
    PatchTransactionsWrapper$outboundSchema.parse(patchTransactionsWrapper),
  );
}

export function patchTransactionsWrapperFromJSON(
  jsonString: string,
): SafeParseResult<PatchTransactionsWrapper, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PatchTransactionsWrapper$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchTransactionsWrapper' from JSON`,
  );
}
