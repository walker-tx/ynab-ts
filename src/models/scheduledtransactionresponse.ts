/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ScheduledTransactionDetail,
  ScheduledTransactionDetail$inboundSchema,
  ScheduledTransactionDetail$Outbound,
  ScheduledTransactionDetail$outboundSchema,
} from "./scheduledtransactiondetail.js";

export type ScheduledTransactionResponseData = {
  scheduledTransaction: ScheduledTransactionDetail;
};

export type ScheduledTransactionResponse = {
  data: ScheduledTransactionResponseData;
};

/** @internal */
export const ScheduledTransactionResponseData$inboundSchema: z.ZodType<
  ScheduledTransactionResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduled_transaction: ScheduledTransactionDetail$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "scheduled_transaction": "scheduledTransaction",
  });
});

/** @internal */
export type ScheduledTransactionResponseData$Outbound = {
  scheduled_transaction: ScheduledTransactionDetail$Outbound;
};

/** @internal */
export const ScheduledTransactionResponseData$outboundSchema: z.ZodType<
  ScheduledTransactionResponseData$Outbound,
  z.ZodTypeDef,
  ScheduledTransactionResponseData
> = z.object({
  scheduledTransaction: ScheduledTransactionDetail$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    scheduledTransaction: "scheduled_transaction",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionResponseData$ {
  /** @deprecated use `ScheduledTransactionResponseData$inboundSchema` instead. */
  export const inboundSchema = ScheduledTransactionResponseData$inboundSchema;
  /** @deprecated use `ScheduledTransactionResponseData$outboundSchema` instead. */
  export const outboundSchema = ScheduledTransactionResponseData$outboundSchema;
  /** @deprecated use `ScheduledTransactionResponseData$Outbound` instead. */
  export type Outbound = ScheduledTransactionResponseData$Outbound;
}

export function scheduledTransactionResponseDataToJSON(
  scheduledTransactionResponseData: ScheduledTransactionResponseData,
): string {
  return JSON.stringify(
    ScheduledTransactionResponseData$outboundSchema.parse(
      scheduledTransactionResponseData,
    ),
  );
}

export function scheduledTransactionResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledTransactionResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledTransactionResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledTransactionResponseData' from JSON`,
  );
}

/** @internal */
export const ScheduledTransactionResponse$inboundSchema: z.ZodType<
  ScheduledTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ScheduledTransactionResponseData$inboundSchema),
});

/** @internal */
export type ScheduledTransactionResponse$Outbound = {
  data: ScheduledTransactionResponseData$Outbound;
};

/** @internal */
export const ScheduledTransactionResponse$outboundSchema: z.ZodType<
  ScheduledTransactionResponse$Outbound,
  z.ZodTypeDef,
  ScheduledTransactionResponse
> = z.object({
  data: z.lazy(() => ScheduledTransactionResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionResponse$ {
  /** @deprecated use `ScheduledTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = ScheduledTransactionResponse$inboundSchema;
  /** @deprecated use `ScheduledTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = ScheduledTransactionResponse$outboundSchema;
  /** @deprecated use `ScheduledTransactionResponse$Outbound` instead. */
  export type Outbound = ScheduledTransactionResponse$Outbound;
}

export function scheduledTransactionResponseToJSON(
  scheduledTransactionResponse: ScheduledTransactionResponse,
): string {
  return JSON.stringify(
    ScheduledTransactionResponse$outboundSchema.parse(
      scheduledTransactionResponse,
    ),
  );
}

export function scheduledTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledTransactionResponse' from JSON`,
  );
}
