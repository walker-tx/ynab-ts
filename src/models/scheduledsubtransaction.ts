/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ScheduledSubTransaction = {
  id: string;
  scheduledTransactionId: string;
  /**
   * The scheduled subtransaction amount in milliunits format
   */
  amount: number;
  memo?: string | null | undefined;
  payeeId?: string | null | undefined;
  payeeName?: string | null | undefined;
  categoryId?: string | null | undefined;
  categoryName?: string | null | undefined;
  /**
   * If a transfer, the account_id which the scheduled subtransaction transfers to
   */
  transferAccountId?: string | null | undefined;
  /**
   * Whether or not the scheduled subtransaction has been deleted. Deleted scheduled subtransactions will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const ScheduledSubTransaction$inboundSchema: z.ZodType<
  ScheduledSubTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  scheduled_transaction_id: z.string(),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  category_name: z.nullable(z.string()).optional(),
  transfer_account_id: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "scheduled_transaction_id": "scheduledTransactionId",
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
    "category_name": "categoryName",
    "transfer_account_id": "transferAccountId",
  });
});

/** @internal */
export type ScheduledSubTransaction$Outbound = {
  id: string;
  scheduled_transaction_id: string;
  amount: number;
  memo?: string | null | undefined;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  category_name?: string | null | undefined;
  transfer_account_id?: string | null | undefined;
  deleted: boolean;
};

/** @internal */
export const ScheduledSubTransaction$outboundSchema: z.ZodType<
  ScheduledSubTransaction$Outbound,
  z.ZodTypeDef,
  ScheduledSubTransaction
> = z.object({
  id: z.string(),
  scheduledTransactionId: z.string(),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  categoryName: z.nullable(z.string()).optional(),
  transferAccountId: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    scheduledTransactionId: "scheduled_transaction_id",
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
    categoryName: "category_name",
    transferAccountId: "transfer_account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledSubTransaction$ {
  /** @deprecated use `ScheduledSubTransaction$inboundSchema` instead. */
  export const inboundSchema = ScheduledSubTransaction$inboundSchema;
  /** @deprecated use `ScheduledSubTransaction$outboundSchema` instead. */
  export const outboundSchema = ScheduledSubTransaction$outboundSchema;
  /** @deprecated use `ScheduledSubTransaction$Outbound` instead. */
  export type Outbound = ScheduledSubTransaction$Outbound;
}

export function scheduledSubTransactionToJSON(
  scheduledSubTransaction: ScheduledSubTransaction,
): string {
  return JSON.stringify(
    ScheduledSubTransaction$outboundSchema.parse(scheduledSubTransaction),
  );
}

export function scheduledSubTransactionFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledSubTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledSubTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledSubTransaction' from JSON`,
  );
}
