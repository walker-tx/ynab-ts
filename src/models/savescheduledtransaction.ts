/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ScheduledTransactionFrequency,
  ScheduledTransactionFrequency$inboundSchema,
  ScheduledTransactionFrequency$outboundSchema,
} from "./scheduledtransactionfrequency.js";
import {
  TransactionFlagColor,
  TransactionFlagColor$inboundSchema,
  TransactionFlagColor$outboundSchema,
} from "./transactionflagcolor.js";

export type SaveScheduledTransaction = {
  accountId: string;
  /**
   * The scheduled transaction date in ISO format (e.g. 2016-12-01).  This should be a future date no more than 5 years into the future.
   */
  date: RFCDate;
  /**
   * The scheduled transaction amount in milliunits format.
   */
  amount?: number | undefined;
  /**
   * The payee for the scheduled transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `transfer_payee_id` on the account resource.
   */
  payeeId?: string | null | undefined;
  /**
   * The payee name for the the scheduled transaction.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a payee with the same name or (2) creation of a new payee.
   */
  payeeName?: string | null | undefined;
  /**
   * The category for the scheduled transaction. Credit Card Payment categories are not permitted. Creating a split scheduled transaction is not currently supported.
   */
  categoryId?: string | null | undefined;
  memo?: string | null | undefined;
  /**
   * The transaction flag
   */
  flagColor?: TransactionFlagColor | null | undefined;
  /**
   * The scheduled transaction frequency
   */
  frequency?: ScheduledTransactionFrequency | undefined;
};

/** @internal */
export const SaveScheduledTransaction$inboundSchema: z.ZodType<
  SaveScheduledTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
  date: z.string().transform(v => new RFCDate(v)),
  amount: z.number().int().optional(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  flag_color: z.nullable(TransactionFlagColor$inboundSchema).optional(),
  frequency: ScheduledTransactionFrequency$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
    "flag_color": "flagColor",
  });
});

/** @internal */
export type SaveScheduledTransaction$Outbound = {
  account_id: string;
  date: string;
  amount?: number | undefined;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  memo?: string | null | undefined;
  flag_color?: string | null | undefined;
  frequency?: string | undefined;
};

/** @internal */
export const SaveScheduledTransaction$outboundSchema: z.ZodType<
  SaveScheduledTransaction$Outbound,
  z.ZodTypeDef,
  SaveScheduledTransaction
> = z.object({
  accountId: z.string(),
  date: z.instanceof(RFCDate).transform(v => v.toString()),
  amount: z.number().int().optional(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  flagColor: z.nullable(TransactionFlagColor$outboundSchema).optional(),
  frequency: ScheduledTransactionFrequency$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
    flagColor: "flag_color",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveScheduledTransaction$ {
  /** @deprecated use `SaveScheduledTransaction$inboundSchema` instead. */
  export const inboundSchema = SaveScheduledTransaction$inboundSchema;
  /** @deprecated use `SaveScheduledTransaction$outboundSchema` instead. */
  export const outboundSchema = SaveScheduledTransaction$outboundSchema;
  /** @deprecated use `SaveScheduledTransaction$Outbound` instead. */
  export type Outbound = SaveScheduledTransaction$Outbound;
}

export function saveScheduledTransactionToJSON(
  saveScheduledTransaction: SaveScheduledTransaction,
): string {
  return JSON.stringify(
    SaveScheduledTransaction$outboundSchema.parse(saveScheduledTransaction),
  );
}

export function saveScheduledTransactionFromJSON(
  jsonString: string,
): SafeParseResult<SaveScheduledTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveScheduledTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveScheduledTransaction' from JSON`,
  );
}
