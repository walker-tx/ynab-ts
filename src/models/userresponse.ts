/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";

export type UserResponseData = {
  user: User;
};

export type UserResponse = {
  data: UserResponseData;
};

/** @internal */
export const UserResponseData$inboundSchema: z.ZodType<
  UserResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: User$inboundSchema,
});

/** @internal */
export type UserResponseData$Outbound = {
  user: User$Outbound;
};

/** @internal */
export const UserResponseData$outboundSchema: z.ZodType<
  UserResponseData$Outbound,
  z.ZodTypeDef,
  UserResponseData
> = z.object({
  user: User$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserResponseData$ {
  /** @deprecated use `UserResponseData$inboundSchema` instead. */
  export const inboundSchema = UserResponseData$inboundSchema;
  /** @deprecated use `UserResponseData$outboundSchema` instead. */
  export const outboundSchema = UserResponseData$outboundSchema;
  /** @deprecated use `UserResponseData$Outbound` instead. */
  export type Outbound = UserResponseData$Outbound;
}

export function userResponseDataToJSON(
  userResponseData: UserResponseData,
): string {
  return JSON.stringify(
    UserResponseData$outboundSchema.parse(userResponseData),
  );
}

export function userResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<UserResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserResponseData' from JSON`,
  );
}

/** @internal */
export const UserResponse$inboundSchema: z.ZodType<
  UserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => UserResponseData$inboundSchema),
});

/** @internal */
export type UserResponse$Outbound = {
  data: UserResponseData$Outbound;
};

/** @internal */
export const UserResponse$outboundSchema: z.ZodType<
  UserResponse$Outbound,
  z.ZodTypeDef,
  UserResponse
> = z.object({
  data: z.lazy(() => UserResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserResponse$ {
  /** @deprecated use `UserResponse$inboundSchema` instead. */
  export const inboundSchema = UserResponse$inboundSchema;
  /** @deprecated use `UserResponse$outboundSchema` instead. */
  export const outboundSchema = UserResponse$outboundSchema;
  /** @deprecated use `UserResponse$Outbound` instead. */
  export type Outbound = UserResponse$Outbound;
}

export function userResponseToJSON(userResponse: UserResponse): string {
  return JSON.stringify(UserResponse$outboundSchema.parse(userResponse));
}

export function userResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserResponse' from JSON`,
  );
}
