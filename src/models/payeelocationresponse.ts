/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PayeeLocation,
  PayeeLocation$inboundSchema,
  PayeeLocation$Outbound,
  PayeeLocation$outboundSchema,
} from "./payeelocation.js";

export type PayeeLocationResponseData = {
  payeeLocation: PayeeLocation;
};

export type PayeeLocationResponse = {
  data: PayeeLocationResponseData;
};

/** @internal */
export const PayeeLocationResponseData$inboundSchema: z.ZodType<
  PayeeLocationResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  payee_location: PayeeLocation$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "payee_location": "payeeLocation",
  });
});

/** @internal */
export type PayeeLocationResponseData$Outbound = {
  payee_location: PayeeLocation$Outbound;
};

/** @internal */
export const PayeeLocationResponseData$outboundSchema: z.ZodType<
  PayeeLocationResponseData$Outbound,
  z.ZodTypeDef,
  PayeeLocationResponseData
> = z.object({
  payeeLocation: PayeeLocation$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    payeeLocation: "payee_location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeLocationResponseData$ {
  /** @deprecated use `PayeeLocationResponseData$inboundSchema` instead. */
  export const inboundSchema = PayeeLocationResponseData$inboundSchema;
  /** @deprecated use `PayeeLocationResponseData$outboundSchema` instead. */
  export const outboundSchema = PayeeLocationResponseData$outboundSchema;
  /** @deprecated use `PayeeLocationResponseData$Outbound` instead. */
  export type Outbound = PayeeLocationResponseData$Outbound;
}

export function payeeLocationResponseDataToJSON(
  payeeLocationResponseData: PayeeLocationResponseData,
): string {
  return JSON.stringify(
    PayeeLocationResponseData$outboundSchema.parse(payeeLocationResponseData),
  );
}

export function payeeLocationResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<PayeeLocationResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeLocationResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeLocationResponseData' from JSON`,
  );
}

/** @internal */
export const PayeeLocationResponse$inboundSchema: z.ZodType<
  PayeeLocationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PayeeLocationResponseData$inboundSchema),
});

/** @internal */
export type PayeeLocationResponse$Outbound = {
  data: PayeeLocationResponseData$Outbound;
};

/** @internal */
export const PayeeLocationResponse$outboundSchema: z.ZodType<
  PayeeLocationResponse$Outbound,
  z.ZodTypeDef,
  PayeeLocationResponse
> = z.object({
  data: z.lazy(() => PayeeLocationResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeLocationResponse$ {
  /** @deprecated use `PayeeLocationResponse$inboundSchema` instead. */
  export const inboundSchema = PayeeLocationResponse$inboundSchema;
  /** @deprecated use `PayeeLocationResponse$outboundSchema` instead. */
  export const outboundSchema = PayeeLocationResponse$outboundSchema;
  /** @deprecated use `PayeeLocationResponse$Outbound` instead. */
  export type Outbound = PayeeLocationResponse$Outbound;
}

export function payeeLocationResponseToJSON(
  payeeLocationResponse: PayeeLocationResponse,
): string {
  return JSON.stringify(
    PayeeLocationResponse$outboundSchema.parse(payeeLocationResponse),
  );
}

export function payeeLocationResponseFromJSON(
  jsonString: string,
): SafeParseResult<PayeeLocationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeLocationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeLocationResponse' from JSON`,
  );
}
