/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Payee,
  Payee$inboundSchema,
  Payee$Outbound,
  Payee$outboundSchema,
} from "./payee.js";

export type PayeesResponseData = {
  payees: Array<Payee>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type PayeesResponse = {
  data: PayeesResponseData;
};

/** @internal */
export const PayeesResponseData$inboundSchema: z.ZodType<
  PayeesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  payees: z.array(Payee$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type PayeesResponseData$Outbound = {
  payees: Array<Payee$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const PayeesResponseData$outboundSchema: z.ZodType<
  PayeesResponseData$Outbound,
  z.ZodTypeDef,
  PayeesResponseData
> = z.object({
  payees: z.array(Payee$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeesResponseData$ {
  /** @deprecated use `PayeesResponseData$inboundSchema` instead. */
  export const inboundSchema = PayeesResponseData$inboundSchema;
  /** @deprecated use `PayeesResponseData$outboundSchema` instead. */
  export const outboundSchema = PayeesResponseData$outboundSchema;
  /** @deprecated use `PayeesResponseData$Outbound` instead. */
  export type Outbound = PayeesResponseData$Outbound;
}

export function payeesResponseDataToJSON(
  payeesResponseData: PayeesResponseData,
): string {
  return JSON.stringify(
    PayeesResponseData$outboundSchema.parse(payeesResponseData),
  );
}

export function payeesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<PayeesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeesResponseData' from JSON`,
  );
}

/** @internal */
export const PayeesResponse$inboundSchema: z.ZodType<
  PayeesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PayeesResponseData$inboundSchema),
});

/** @internal */
export type PayeesResponse$Outbound = {
  data: PayeesResponseData$Outbound;
};

/** @internal */
export const PayeesResponse$outboundSchema: z.ZodType<
  PayeesResponse$Outbound,
  z.ZodTypeDef,
  PayeesResponse
> = z.object({
  data: z.lazy(() => PayeesResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeesResponse$ {
  /** @deprecated use `PayeesResponse$inboundSchema` instead. */
  export const inboundSchema = PayeesResponse$inboundSchema;
  /** @deprecated use `PayeesResponse$outboundSchema` instead. */
  export const outboundSchema = PayeesResponse$outboundSchema;
  /** @deprecated use `PayeesResponse$Outbound` instead. */
  export type Outbound = PayeesResponse$Outbound;
}

export function payeesResponseToJSON(payeesResponse: PayeesResponse): string {
  return JSON.stringify(PayeesResponse$outboundSchema.parse(payeesResponse));
}

export function payeesResponseFromJSON(
  jsonString: string,
): SafeParseResult<PayeesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeesResponse' from JSON`,
  );
}
