/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionClearedStatus,
  TransactionClearedStatus$inboundSchema,
  TransactionClearedStatus$outboundSchema,
} from "./transactionclearedstatus.js";
import {
  TransactionFlagColor,
  TransactionFlagColor$inboundSchema,
  TransactionFlagColor$outboundSchema,
} from "./transactionflagcolor.js";

/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 */
export const TransactionSummaryDebtTransactionType = {
  Payment: "payment",
  Refund: "refund",
  Fee: "fee",
  Interest: "interest",
  Escrow: "escrow",
  BalanceAdjustment: "balanceAdjustment",
  Credit: "credit",
  Charge: "charge",
} as const;
/**
 * If the transaction is a debt/loan account transaction, the type of transaction
 */
export type TransactionSummaryDebtTransactionType = ClosedEnum<
  typeof TransactionSummaryDebtTransactionType
>;

export type TransactionSummary = {
  id: string;
  /**
   * The transaction date in ISO format (e.g. 2016-12-01)
   */
  date: RFCDate;
  /**
   * The transaction amount in milliunits format
   */
  amount: number;
  memo?: string | null | undefined;
  /**
   * The cleared status of the transaction
   */
  cleared: TransactionClearedStatus;
  /**
   * Whether or not the transaction is approved
   */
  approved: boolean;
  /**
   * The transaction flag
   */
  flagColor?: TransactionFlagColor | null | undefined;
  /**
   * The customized name of a transaction flag
   */
  flagName?: string | null | undefined;
  accountId: string;
  payeeId?: string | null | undefined;
  categoryId?: string | null | undefined;
  /**
   * If a transfer transaction, the account to which it transfers
   */
  transferAccountId?: string | null | undefined;
  /**
   * If a transfer transaction, the id of transaction on the other side of the transfer
   */
  transferTransactionId?: string | null | undefined;
  /**
   * If transaction is matched, the id of the matched transaction
   */
  matchedTransactionId?: string | null | undefined;
  /**
   * If the transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
   */
  importId?: string | null | undefined;
  /**
   * If the transaction was imported, the payee name that was used when importing and before applying any payee rename rules
   */
  importPayeeName?: string | null | undefined;
  /**
   * If the transaction was imported, the original payee name as it appeared on the statement
   */
  importPayeeNameOriginal?: string | null | undefined;
  /**
   * If the transaction is a debt/loan account transaction, the type of transaction
   */
  debtTransactionType?:
    | TransactionSummaryDebtTransactionType
    | null
    | undefined;
  /**
   * Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const TransactionSummaryDebtTransactionType$inboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryDebtTransactionType> = z.nativeEnum(
    TransactionSummaryDebtTransactionType,
  );

/** @internal */
export const TransactionSummaryDebtTransactionType$outboundSchema:
  z.ZodNativeEnum<typeof TransactionSummaryDebtTransactionType> =
    TransactionSummaryDebtTransactionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummaryDebtTransactionType$ {
  /** @deprecated use `TransactionSummaryDebtTransactionType$inboundSchema` instead. */
  export const inboundSchema =
    TransactionSummaryDebtTransactionType$inboundSchema;
  /** @deprecated use `TransactionSummaryDebtTransactionType$outboundSchema` instead. */
  export const outboundSchema =
    TransactionSummaryDebtTransactionType$outboundSchema;
}

/** @internal */
export const TransactionSummary$inboundSchema: z.ZodType<
  TransactionSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  date: z.string().transform(v => new RFCDate(v)),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$inboundSchema,
  approved: z.boolean(),
  flag_color: z.nullable(TransactionFlagColor$inboundSchema).optional(),
  flag_name: z.nullable(z.string()).optional(),
  account_id: z.string(),
  payee_id: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  transfer_account_id: z.nullable(z.string()).optional(),
  transfer_transaction_id: z.nullable(z.string()).optional(),
  matched_transaction_id: z.nullable(z.string()).optional(),
  import_id: z.nullable(z.string()).optional(),
  import_payee_name: z.nullable(z.string()).optional(),
  import_payee_name_original: z.nullable(z.string()).optional(),
  debt_transaction_type: z.nullable(
    TransactionSummaryDebtTransactionType$inboundSchema,
  ).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "flag_color": "flagColor",
    "flag_name": "flagName",
    "account_id": "accountId",
    "payee_id": "payeeId",
    "category_id": "categoryId",
    "transfer_account_id": "transferAccountId",
    "transfer_transaction_id": "transferTransactionId",
    "matched_transaction_id": "matchedTransactionId",
    "import_id": "importId",
    "import_payee_name": "importPayeeName",
    "import_payee_name_original": "importPayeeNameOriginal",
    "debt_transaction_type": "debtTransactionType",
  });
});

/** @internal */
export type TransactionSummary$Outbound = {
  id: string;
  date: string;
  amount: number;
  memo?: string | null | undefined;
  cleared: string;
  approved: boolean;
  flag_color?: string | null | undefined;
  flag_name?: string | null | undefined;
  account_id: string;
  payee_id?: string | null | undefined;
  category_id?: string | null | undefined;
  transfer_account_id?: string | null | undefined;
  transfer_transaction_id?: string | null | undefined;
  matched_transaction_id?: string | null | undefined;
  import_id?: string | null | undefined;
  import_payee_name?: string | null | undefined;
  import_payee_name_original?: string | null | undefined;
  debt_transaction_type?: string | null | undefined;
  deleted: boolean;
};

/** @internal */
export const TransactionSummary$outboundSchema: z.ZodType<
  TransactionSummary$Outbound,
  z.ZodTypeDef,
  TransactionSummary
> = z.object({
  id: z.string(),
  date: z.instanceof(RFCDate).transform(v => v.toString()),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  cleared: TransactionClearedStatus$outboundSchema,
  approved: z.boolean(),
  flagColor: z.nullable(TransactionFlagColor$outboundSchema).optional(),
  flagName: z.nullable(z.string()).optional(),
  accountId: z.string(),
  payeeId: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  transferAccountId: z.nullable(z.string()).optional(),
  transferTransactionId: z.nullable(z.string()).optional(),
  matchedTransactionId: z.nullable(z.string()).optional(),
  importId: z.nullable(z.string()).optional(),
  importPayeeName: z.nullable(z.string()).optional(),
  importPayeeNameOriginal: z.nullable(z.string()).optional(),
  debtTransactionType: z.nullable(
    TransactionSummaryDebtTransactionType$outboundSchema,
  ).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    flagColor: "flag_color",
    flagName: "flag_name",
    accountId: "account_id",
    payeeId: "payee_id",
    categoryId: "category_id",
    transferAccountId: "transfer_account_id",
    transferTransactionId: "transfer_transaction_id",
    matchedTransactionId: "matched_transaction_id",
    importId: "import_id",
    importPayeeName: "import_payee_name",
    importPayeeNameOriginal: "import_payee_name_original",
    debtTransactionType: "debt_transaction_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSummary$ {
  /** @deprecated use `TransactionSummary$inboundSchema` instead. */
  export const inboundSchema = TransactionSummary$inboundSchema;
  /** @deprecated use `TransactionSummary$outboundSchema` instead. */
  export const outboundSchema = TransactionSummary$outboundSchema;
  /** @deprecated use `TransactionSummary$Outbound` instead. */
  export type Outbound = TransactionSummary$Outbound;
}

export function transactionSummaryToJSON(
  transactionSummary: TransactionSummary,
): string {
  return JSON.stringify(
    TransactionSummary$outboundSchema.parse(transactionSummary),
  );
}

export function transactionSummaryFromJSON(
  jsonString: string,
): SafeParseResult<TransactionSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionSummary' from JSON`,
  );
}
