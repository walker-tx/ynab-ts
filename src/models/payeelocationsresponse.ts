/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PayeeLocation,
  PayeeLocation$inboundSchema,
  PayeeLocation$Outbound,
  PayeeLocation$outboundSchema,
} from "./payeelocation.js";

export type PayeeLocationsResponseData = {
  payeeLocations: Array<PayeeLocation>;
};

export type PayeeLocationsResponse = {
  data: PayeeLocationsResponseData;
};

/** @internal */
export const PayeeLocationsResponseData$inboundSchema: z.ZodType<
  PayeeLocationsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  payee_locations: z.array(PayeeLocation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "payee_locations": "payeeLocations",
  });
});

/** @internal */
export type PayeeLocationsResponseData$Outbound = {
  payee_locations: Array<PayeeLocation$Outbound>;
};

/** @internal */
export const PayeeLocationsResponseData$outboundSchema: z.ZodType<
  PayeeLocationsResponseData$Outbound,
  z.ZodTypeDef,
  PayeeLocationsResponseData
> = z.object({
  payeeLocations: z.array(PayeeLocation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    payeeLocations: "payee_locations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeLocationsResponseData$ {
  /** @deprecated use `PayeeLocationsResponseData$inboundSchema` instead. */
  export const inboundSchema = PayeeLocationsResponseData$inboundSchema;
  /** @deprecated use `PayeeLocationsResponseData$outboundSchema` instead. */
  export const outboundSchema = PayeeLocationsResponseData$outboundSchema;
  /** @deprecated use `PayeeLocationsResponseData$Outbound` instead. */
  export type Outbound = PayeeLocationsResponseData$Outbound;
}

export function payeeLocationsResponseDataToJSON(
  payeeLocationsResponseData: PayeeLocationsResponseData,
): string {
  return JSON.stringify(
    PayeeLocationsResponseData$outboundSchema.parse(payeeLocationsResponseData),
  );
}

export function payeeLocationsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<PayeeLocationsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeLocationsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeLocationsResponseData' from JSON`,
  );
}

/** @internal */
export const PayeeLocationsResponse$inboundSchema: z.ZodType<
  PayeeLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PayeeLocationsResponseData$inboundSchema),
});

/** @internal */
export type PayeeLocationsResponse$Outbound = {
  data: PayeeLocationsResponseData$Outbound;
};

/** @internal */
export const PayeeLocationsResponse$outboundSchema: z.ZodType<
  PayeeLocationsResponse$Outbound,
  z.ZodTypeDef,
  PayeeLocationsResponse
> = z.object({
  data: z.lazy(() => PayeeLocationsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeLocationsResponse$ {
  /** @deprecated use `PayeeLocationsResponse$inboundSchema` instead. */
  export const inboundSchema = PayeeLocationsResponse$inboundSchema;
  /** @deprecated use `PayeeLocationsResponse$outboundSchema` instead. */
  export const outboundSchema = PayeeLocationsResponse$outboundSchema;
  /** @deprecated use `PayeeLocationsResponse$Outbound` instead. */
  export type Outbound = PayeeLocationsResponse$Outbound;
}

export function payeeLocationsResponseToJSON(
  payeeLocationsResponse: PayeeLocationsResponse,
): string {
  return JSON.stringify(
    PayeeLocationsResponse$outboundSchema.parse(payeeLocationsResponse),
  );
}

export function payeeLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PayeeLocationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeLocationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeLocationsResponse' from JSON`,
  );
}
