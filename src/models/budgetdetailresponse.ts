/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BudgetDetail,
  BudgetDetail$inboundSchema,
  BudgetDetail$Outbound,
  BudgetDetail$outboundSchema,
} from "./budgetdetail.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BudgetDetailResponseData = {
  budget: BudgetDetail;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type BudgetDetailResponse = {
  data: BudgetDetailResponseData;
};

/** @internal */
export const BudgetDetailResponseData$inboundSchema: z.ZodType<
  BudgetDetailResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget: BudgetDetail$inboundSchema,
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type BudgetDetailResponseData$Outbound = {
  budget: BudgetDetail$Outbound;
  server_knowledge: number;
};

/** @internal */
export const BudgetDetailResponseData$outboundSchema: z.ZodType<
  BudgetDetailResponseData$Outbound,
  z.ZodTypeDef,
  BudgetDetailResponseData
> = z.object({
  budget: BudgetDetail$outboundSchema,
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetDetailResponseData$ {
  /** @deprecated use `BudgetDetailResponseData$inboundSchema` instead. */
  export const inboundSchema = BudgetDetailResponseData$inboundSchema;
  /** @deprecated use `BudgetDetailResponseData$outboundSchema` instead. */
  export const outboundSchema = BudgetDetailResponseData$outboundSchema;
  /** @deprecated use `BudgetDetailResponseData$Outbound` instead. */
  export type Outbound = BudgetDetailResponseData$Outbound;
}

export function budgetDetailResponseDataToJSON(
  budgetDetailResponseData: BudgetDetailResponseData,
): string {
  return JSON.stringify(
    BudgetDetailResponseData$outboundSchema.parse(budgetDetailResponseData),
  );
}

export function budgetDetailResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<BudgetDetailResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetDetailResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetDetailResponseData' from JSON`,
  );
}

/** @internal */
export const BudgetDetailResponse$inboundSchema: z.ZodType<
  BudgetDetailResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => BudgetDetailResponseData$inboundSchema),
});

/** @internal */
export type BudgetDetailResponse$Outbound = {
  data: BudgetDetailResponseData$Outbound;
};

/** @internal */
export const BudgetDetailResponse$outboundSchema: z.ZodType<
  BudgetDetailResponse$Outbound,
  z.ZodTypeDef,
  BudgetDetailResponse
> = z.object({
  data: z.lazy(() => BudgetDetailResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetDetailResponse$ {
  /** @deprecated use `BudgetDetailResponse$inboundSchema` instead. */
  export const inboundSchema = BudgetDetailResponse$inboundSchema;
  /** @deprecated use `BudgetDetailResponse$outboundSchema` instead. */
  export const outboundSchema = BudgetDetailResponse$outboundSchema;
  /** @deprecated use `BudgetDetailResponse$Outbound` instead. */
  export type Outbound = BudgetDetailResponse$Outbound;
}

export function budgetDetailResponseToJSON(
  budgetDetailResponse: BudgetDetailResponse,
): string {
  return JSON.stringify(
    BudgetDetailResponse$outboundSchema.parse(budgetDetailResponse),
  );
}

export function budgetDetailResponseFromJSON(
  jsonString: string,
): SafeParseResult<BudgetDetailResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetDetailResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetDetailResponse' from JSON`,
  );
}
