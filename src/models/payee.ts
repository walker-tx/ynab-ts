/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Payee = {
  id: string;
  name: string;
  /**
   * If a transfer payee, the `account_id` to which this payee transfers to
   */
  transferAccountId?: string | null | undefined;
  /**
   * Whether or not the payee has been deleted.  Deleted payees will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const Payee$inboundSchema: z.ZodType<Payee, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    name: z.string(),
    transfer_account_id: z.nullable(z.string()).optional(),
    deleted: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "transfer_account_id": "transferAccountId",
    });
  });

/** @internal */
export type Payee$Outbound = {
  id: string;
  name: string;
  transfer_account_id?: string | null | undefined;
  deleted: boolean;
};

/** @internal */
export const Payee$outboundSchema: z.ZodType<
  Payee$Outbound,
  z.ZodTypeDef,
  Payee
> = z.object({
  id: z.string(),
  name: z.string(),
  transferAccountId: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    transferAccountId: "transfer_account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payee$ {
  /** @deprecated use `Payee$inboundSchema` instead. */
  export const inboundSchema = Payee$inboundSchema;
  /** @deprecated use `Payee$outboundSchema` instead. */
  export const outboundSchema = Payee$outboundSchema;
  /** @deprecated use `Payee$Outbound` instead. */
  export type Outbound = Payee$Outbound;
}

export function payeeToJSON(payee: Payee): string {
  return JSON.stringify(Payee$outboundSchema.parse(payee));
}

export function payeeFromJSON(
  jsonString: string,
): SafeParseResult<Payee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payee' from JSON`,
  );
}
