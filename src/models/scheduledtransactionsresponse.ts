/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  ScheduledTransactionDetail,
  ScheduledTransactionDetail$inboundSchema,
  ScheduledTransactionDetail$Outbound,
  ScheduledTransactionDetail$outboundSchema,
} from "./scheduledtransactiondetail.js";

export type ScheduledTransactionsResponseData = {
  scheduledTransactions: Array<ScheduledTransactionDetail>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type ScheduledTransactionsResponse = {
  data: ScheduledTransactionsResponseData;
};

/** @internal */
export const ScheduledTransactionsResponseData$inboundSchema: z.ZodType<
  ScheduledTransactionsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  scheduled_transactions: z.array(ScheduledTransactionDetail$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "scheduled_transactions": "scheduledTransactions",
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type ScheduledTransactionsResponseData$Outbound = {
  scheduled_transactions: Array<ScheduledTransactionDetail$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const ScheduledTransactionsResponseData$outboundSchema: z.ZodType<
  ScheduledTransactionsResponseData$Outbound,
  z.ZodTypeDef,
  ScheduledTransactionsResponseData
> = z.object({
  scheduledTransactions: z.array(ScheduledTransactionDetail$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    scheduledTransactions: "scheduled_transactions",
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionsResponseData$ {
  /** @deprecated use `ScheduledTransactionsResponseData$inboundSchema` instead. */
  export const inboundSchema = ScheduledTransactionsResponseData$inboundSchema;
  /** @deprecated use `ScheduledTransactionsResponseData$outboundSchema` instead. */
  export const outboundSchema =
    ScheduledTransactionsResponseData$outboundSchema;
  /** @deprecated use `ScheduledTransactionsResponseData$Outbound` instead. */
  export type Outbound = ScheduledTransactionsResponseData$Outbound;
}

export function scheduledTransactionsResponseDataToJSON(
  scheduledTransactionsResponseData: ScheduledTransactionsResponseData,
): string {
  return JSON.stringify(
    ScheduledTransactionsResponseData$outboundSchema.parse(
      scheduledTransactionsResponseData,
    ),
  );
}

export function scheduledTransactionsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledTransactionsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledTransactionsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledTransactionsResponseData' from JSON`,
  );
}

/** @internal */
export const ScheduledTransactionsResponse$inboundSchema: z.ZodType<
  ScheduledTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => ScheduledTransactionsResponseData$inboundSchema),
});

/** @internal */
export type ScheduledTransactionsResponse$Outbound = {
  data: ScheduledTransactionsResponseData$Outbound;
};

/** @internal */
export const ScheduledTransactionsResponse$outboundSchema: z.ZodType<
  ScheduledTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ScheduledTransactionsResponse
> = z.object({
  data: z.lazy(() => ScheduledTransactionsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScheduledTransactionsResponse$ {
  /** @deprecated use `ScheduledTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ScheduledTransactionsResponse$inboundSchema;
  /** @deprecated use `ScheduledTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ScheduledTransactionsResponse$outboundSchema;
  /** @deprecated use `ScheduledTransactionsResponse$Outbound` instead. */
  export type Outbound = ScheduledTransactionsResponse$Outbound;
}

export function scheduledTransactionsResponseToJSON(
  scheduledTransactionsResponse: ScheduledTransactionsResponse,
): string {
  return JSON.stringify(
    ScheduledTransactionsResponse$outboundSchema.parse(
      scheduledTransactionsResponse,
    ),
  );
}

export function scheduledTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ScheduledTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ScheduledTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ScheduledTransactionsResponse' from JSON`,
  );
}
