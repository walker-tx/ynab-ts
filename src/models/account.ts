/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccountType,
  AccountType$inboundSchema,
  AccountType$outboundSchema,
} from "./accounttype.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Account = {
  id: string;
  name: string;
  /**
   * The type of account
   */
  type: AccountType;
  /**
   * Whether this account is on budget or not
   */
  onBudget: boolean;
  /**
   * Whether this account is closed or not
   */
  closed: boolean;
  note?: string | null | undefined;
  /**
   * The current balance of the account in milliunits format
   */
  balance: number;
  /**
   * The current cleared balance of the account in milliunits format
   */
  clearedBalance: number;
  /**
   * The current uncleared balance of the account in milliunits format
   */
  unclearedBalance: number;
  /**
   * The payee id which should be used when transferring to this account
   */
  transferPayeeId: string | null;
  /**
   * Whether or not the account is linked to a financial institution for automatic transaction import.
   */
  directImportLinked?: boolean | undefined;
  /**
   * If an account linked to a financial institution (direct_import_linked=true) and the linked connection is not in a healthy state, this will be true.
   */
  directImportInError?: boolean | undefined;
  /**
   * A date/time specifying when the account was last reconciled.
   */
  lastReconciledAt?: Date | null | undefined;
  /**
   * This field is deprecated and will always be null.
   */
  debtOriginalBalance?: number | null | undefined;
  debtInterestRates?: { [k: string]: number } | null | undefined;
  debtMinimumPayments?: { [k: string]: number } | null | undefined;
  debtEscrowAmounts?: { [k: string]: number } | null | undefined;
  /**
   * Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const Account$inboundSchema: z.ZodType<Account, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    name: z.string(),
    type: AccountType$inboundSchema,
    on_budget: z.boolean(),
    closed: z.boolean(),
    note: z.nullable(z.string()).optional(),
    balance: z.number().int(),
    cleared_balance: z.number().int(),
    uncleared_balance: z.number().int(),
    transfer_payee_id: z.nullable(z.string()),
    direct_import_linked: z.boolean().optional(),
    direct_import_in_error: z.boolean().optional(),
    last_reconciled_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    debt_original_balance: z.nullable(z.number().int()).optional(),
    debt_interest_rates: z.nullable(z.record(z.number().int())).optional(),
    debt_minimum_payments: z.nullable(z.record(z.number().int())).optional(),
    debt_escrow_amounts: z.nullable(z.record(z.number().int())).optional(),
    deleted: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "on_budget": "onBudget",
      "cleared_balance": "clearedBalance",
      "uncleared_balance": "unclearedBalance",
      "transfer_payee_id": "transferPayeeId",
      "direct_import_linked": "directImportLinked",
      "direct_import_in_error": "directImportInError",
      "last_reconciled_at": "lastReconciledAt",
      "debt_original_balance": "debtOriginalBalance",
      "debt_interest_rates": "debtInterestRates",
      "debt_minimum_payments": "debtMinimumPayments",
      "debt_escrow_amounts": "debtEscrowAmounts",
    });
  });

/** @internal */
export type Account$Outbound = {
  id: string;
  name: string;
  type: string;
  on_budget: boolean;
  closed: boolean;
  note?: string | null | undefined;
  balance: number;
  cleared_balance: number;
  uncleared_balance: number;
  transfer_payee_id: string | null;
  direct_import_linked?: boolean | undefined;
  direct_import_in_error?: boolean | undefined;
  last_reconciled_at?: string | null | undefined;
  debt_original_balance?: number | null | undefined;
  debt_interest_rates?: { [k: string]: number } | null | undefined;
  debt_minimum_payments?: { [k: string]: number } | null | undefined;
  debt_escrow_amounts?: { [k: string]: number } | null | undefined;
  deleted: boolean;
};

/** @internal */
export const Account$outboundSchema: z.ZodType<
  Account$Outbound,
  z.ZodTypeDef,
  Account
> = z.object({
  id: z.string(),
  name: z.string(),
  type: AccountType$outboundSchema,
  onBudget: z.boolean(),
  closed: z.boolean(),
  note: z.nullable(z.string()).optional(),
  balance: z.number().int(),
  clearedBalance: z.number().int(),
  unclearedBalance: z.number().int(),
  transferPayeeId: z.nullable(z.string()),
  directImportLinked: z.boolean().optional(),
  directImportInError: z.boolean().optional(),
  lastReconciledAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  debtOriginalBalance: z.nullable(z.number().int()).optional(),
  debtInterestRates: z.nullable(z.record(z.number().int())).optional(),
  debtMinimumPayments: z.nullable(z.record(z.number().int())).optional(),
  debtEscrowAmounts: z.nullable(z.record(z.number().int())).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    onBudget: "on_budget",
    clearedBalance: "cleared_balance",
    unclearedBalance: "uncleared_balance",
    transferPayeeId: "transfer_payee_id",
    directImportLinked: "direct_import_linked",
    directImportInError: "direct_import_in_error",
    lastReconciledAt: "last_reconciled_at",
    debtOriginalBalance: "debt_original_balance",
    debtInterestRates: "debt_interest_rates",
    debtMinimumPayments: "debt_minimum_payments",
    debtEscrowAmounts: "debt_escrow_amounts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Account$ {
  /** @deprecated use `Account$inboundSchema` instead. */
  export const inboundSchema = Account$inboundSchema;
  /** @deprecated use `Account$outboundSchema` instead. */
  export const outboundSchema = Account$outboundSchema;
  /** @deprecated use `Account$Outbound` instead. */
  export type Outbound = Account$Outbound;
}

export function accountToJSON(account: Account): string {
  return JSON.stringify(Account$outboundSchema.parse(account));
}

export function accountFromJSON(
  jsonString: string,
): SafeParseResult<Account, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Account$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Account' from JSON`,
  );
}
