/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionDetail,
  TransactionDetail$inboundSchema,
  TransactionDetail$Outbound,
  TransactionDetail$outboundSchema,
} from "./transactiondetail.js";

export type TransactionResponseData = {
  transaction: TransactionDetail;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type TransactionResponse = {
  data: TransactionResponseData;
};

/** @internal */
export const TransactionResponseData$inboundSchema: z.ZodType<
  TransactionResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: TransactionDetail$inboundSchema,
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type TransactionResponseData$Outbound = {
  transaction: TransactionDetail$Outbound;
  server_knowledge: number;
};

/** @internal */
export const TransactionResponseData$outboundSchema: z.ZodType<
  TransactionResponseData$Outbound,
  z.ZodTypeDef,
  TransactionResponseData
> = z.object({
  transaction: TransactionDetail$outboundSchema,
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponseData$ {
  /** @deprecated use `TransactionResponseData$inboundSchema` instead. */
  export const inboundSchema = TransactionResponseData$inboundSchema;
  /** @deprecated use `TransactionResponseData$outboundSchema` instead. */
  export const outboundSchema = TransactionResponseData$outboundSchema;
  /** @deprecated use `TransactionResponseData$Outbound` instead. */
  export type Outbound = TransactionResponseData$Outbound;
}

export function transactionResponseDataToJSON(
  transactionResponseData: TransactionResponseData,
): string {
  return JSON.stringify(
    TransactionResponseData$outboundSchema.parse(transactionResponseData),
  );
}

export function transactionResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponseData' from JSON`,
  );
}

/** @internal */
export const TransactionResponse$inboundSchema: z.ZodType<
  TransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => TransactionResponseData$inboundSchema),
});

/** @internal */
export type TransactionResponse$Outbound = {
  data: TransactionResponseData$Outbound;
};

/** @internal */
export const TransactionResponse$outboundSchema: z.ZodType<
  TransactionResponse$Outbound,
  z.ZodTypeDef,
  TransactionResponse
> = z.object({
  data: z.lazy(() => TransactionResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponse$ {
  /** @deprecated use `TransactionResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionResponse$inboundSchema;
  /** @deprecated use `TransactionResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionResponse$outboundSchema;
  /** @deprecated use `TransactionResponse$Outbound` instead. */
  export type Outbound = TransactionResponse$Outbound;
}

export function transactionResponseToJSON(
  transactionResponse: TransactionResponse,
): string {
  return JSON.stringify(
    TransactionResponse$outboundSchema.parse(transactionResponse),
  );
}

export function transactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponse' from JSON`,
  );
}
