/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MonthSummary = {
  month: RFCDate;
  note?: string | null | undefined;
  /**
   * The total amount of transactions categorized to 'Inflow: Ready to Assign' in the month
   */
  income: number;
  /**
   * The total amount budgeted in the month
   */
  budgeted: number;
  /**
   * The total amount of transactions in the month, excluding those categorized to 'Inflow: Ready to Assign'
   */
  activity: number;
  /**
   * The available amount for 'Ready to Assign'
   */
  toBeBudgeted: number;
  /**
   * The Age of Money as of the month
   */
  ageOfMoney?: number | null | undefined;
  /**
   * Whether or not the month has been deleted.  Deleted months will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const MonthSummary$inboundSchema: z.ZodType<
  MonthSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  month: z.string().transform(v => new RFCDate(v)),
  note: z.nullable(z.string()).optional(),
  income: z.number().int(),
  budgeted: z.number().int(),
  activity: z.number().int(),
  to_be_budgeted: z.number().int(),
  age_of_money: z.nullable(z.number().int()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "to_be_budgeted": "toBeBudgeted",
    "age_of_money": "ageOfMoney",
  });
});

/** @internal */
export type MonthSummary$Outbound = {
  month: string;
  note?: string | null | undefined;
  income: number;
  budgeted: number;
  activity: number;
  to_be_budgeted: number;
  age_of_money?: number | null | undefined;
  deleted: boolean;
};

/** @internal */
export const MonthSummary$outboundSchema: z.ZodType<
  MonthSummary$Outbound,
  z.ZodTypeDef,
  MonthSummary
> = z.object({
  month: z.instanceof(RFCDate).transform(v => v.toString()),
  note: z.nullable(z.string()).optional(),
  income: z.number().int(),
  budgeted: z.number().int(),
  activity: z.number().int(),
  toBeBudgeted: z.number().int(),
  ageOfMoney: z.nullable(z.number().int()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    toBeBudgeted: "to_be_budgeted",
    ageOfMoney: "age_of_money",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MonthSummary$ {
  /** @deprecated use `MonthSummary$inboundSchema` instead. */
  export const inboundSchema = MonthSummary$inboundSchema;
  /** @deprecated use `MonthSummary$outboundSchema` instead. */
  export const outboundSchema = MonthSummary$outboundSchema;
  /** @deprecated use `MonthSummary$Outbound` instead. */
  export type Outbound = MonthSummary$Outbound;
}

export function monthSummaryToJSON(monthSummary: MonthSummary): string {
  return JSON.stringify(MonthSummary$outboundSchema.parse(monthSummary));
}

export function monthSummaryFromJSON(
  jsonString: string,
): SafeParseResult<MonthSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MonthSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MonthSummary' from JSON`,
  );
}
