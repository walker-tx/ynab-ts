/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BudgetSummary,
  BudgetSummary$inboundSchema,
  BudgetSummary$Outbound,
  BudgetSummary$outboundSchema,
} from "./budgetsummary.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BudgetSummaryResponseData = {
  budgets: Array<BudgetSummary>;
  defaultBudget?: BudgetSummary | undefined;
};

export type BudgetSummaryResponse = {
  data: BudgetSummaryResponseData;
};

/** @internal */
export const BudgetSummaryResponseData$inboundSchema: z.ZodType<
  BudgetSummaryResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  budgets: z.array(BudgetSummary$inboundSchema),
  default_budget: BudgetSummary$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "default_budget": "defaultBudget",
  });
});

/** @internal */
export type BudgetSummaryResponseData$Outbound = {
  budgets: Array<BudgetSummary$Outbound>;
  default_budget?: BudgetSummary$Outbound | undefined;
};

/** @internal */
export const BudgetSummaryResponseData$outboundSchema: z.ZodType<
  BudgetSummaryResponseData$Outbound,
  z.ZodTypeDef,
  BudgetSummaryResponseData
> = z.object({
  budgets: z.array(BudgetSummary$outboundSchema),
  defaultBudget: BudgetSummary$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    defaultBudget: "default_budget",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetSummaryResponseData$ {
  /** @deprecated use `BudgetSummaryResponseData$inboundSchema` instead. */
  export const inboundSchema = BudgetSummaryResponseData$inboundSchema;
  /** @deprecated use `BudgetSummaryResponseData$outboundSchema` instead. */
  export const outboundSchema = BudgetSummaryResponseData$outboundSchema;
  /** @deprecated use `BudgetSummaryResponseData$Outbound` instead. */
  export type Outbound = BudgetSummaryResponseData$Outbound;
}

export function budgetSummaryResponseDataToJSON(
  budgetSummaryResponseData: BudgetSummaryResponseData,
): string {
  return JSON.stringify(
    BudgetSummaryResponseData$outboundSchema.parse(budgetSummaryResponseData),
  );
}

export function budgetSummaryResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<BudgetSummaryResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetSummaryResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetSummaryResponseData' from JSON`,
  );
}

/** @internal */
export const BudgetSummaryResponse$inboundSchema: z.ZodType<
  BudgetSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => BudgetSummaryResponseData$inboundSchema),
});

/** @internal */
export type BudgetSummaryResponse$Outbound = {
  data: BudgetSummaryResponseData$Outbound;
};

/** @internal */
export const BudgetSummaryResponse$outboundSchema: z.ZodType<
  BudgetSummaryResponse$Outbound,
  z.ZodTypeDef,
  BudgetSummaryResponse
> = z.object({
  data: z.lazy(() => BudgetSummaryResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BudgetSummaryResponse$ {
  /** @deprecated use `BudgetSummaryResponse$inboundSchema` instead. */
  export const inboundSchema = BudgetSummaryResponse$inboundSchema;
  /** @deprecated use `BudgetSummaryResponse$outboundSchema` instead. */
  export const outboundSchema = BudgetSummaryResponse$outboundSchema;
  /** @deprecated use `BudgetSummaryResponse$Outbound` instead. */
  export type Outbound = BudgetSummaryResponse$Outbound;
}

export function budgetSummaryResponseToJSON(
  budgetSummaryResponse: BudgetSummaryResponse,
): string {
  return JSON.stringify(
    BudgetSummaryResponse$outboundSchema.parse(budgetSummaryResponse),
  );
}

export function budgetSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<BudgetSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BudgetSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BudgetSummaryResponse' from JSON`,
  );
}
