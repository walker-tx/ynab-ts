/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  Payee,
  Payee$inboundSchema,
  Payee$Outbound,
  Payee$outboundSchema,
} from "./payee.js";

export type PayeeResponseData = {
  payee: Payee;
};

export type PayeeResponse = {
  data: PayeeResponseData;
};

/** @internal */
export const PayeeResponseData$inboundSchema: z.ZodType<
  PayeeResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  payee: Payee$inboundSchema,
});

/** @internal */
export type PayeeResponseData$Outbound = {
  payee: Payee$Outbound;
};

/** @internal */
export const PayeeResponseData$outboundSchema: z.ZodType<
  PayeeResponseData$Outbound,
  z.ZodTypeDef,
  PayeeResponseData
> = z.object({
  payee: Payee$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeResponseData$ {
  /** @deprecated use `PayeeResponseData$inboundSchema` instead. */
  export const inboundSchema = PayeeResponseData$inboundSchema;
  /** @deprecated use `PayeeResponseData$outboundSchema` instead. */
  export const outboundSchema = PayeeResponseData$outboundSchema;
  /** @deprecated use `PayeeResponseData$Outbound` instead. */
  export type Outbound = PayeeResponseData$Outbound;
}

export function payeeResponseDataToJSON(
  payeeResponseData: PayeeResponseData,
): string {
  return JSON.stringify(
    PayeeResponseData$outboundSchema.parse(payeeResponseData),
  );
}

export function payeeResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<PayeeResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeResponseData' from JSON`,
  );
}

/** @internal */
export const PayeeResponse$inboundSchema: z.ZodType<
  PayeeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PayeeResponseData$inboundSchema),
});

/** @internal */
export type PayeeResponse$Outbound = {
  data: PayeeResponseData$Outbound;
};

/** @internal */
export const PayeeResponse$outboundSchema: z.ZodType<
  PayeeResponse$Outbound,
  z.ZodTypeDef,
  PayeeResponse
> = z.object({
  data: z.lazy(() => PayeeResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayeeResponse$ {
  /** @deprecated use `PayeeResponse$inboundSchema` instead. */
  export const inboundSchema = PayeeResponse$inboundSchema;
  /** @deprecated use `PayeeResponse$outboundSchema` instead. */
  export const outboundSchema = PayeeResponse$outboundSchema;
  /** @deprecated use `PayeeResponse$Outbound` instead. */
  export type Outbound = PayeeResponse$Outbound;
}

export function payeeResponseToJSON(payeeResponse: PayeeResponse): string {
  return JSON.stringify(PayeeResponse$outboundSchema.parse(payeeResponse));
}

export function payeeResponseFromJSON(
  jsonString: string,
): SafeParseResult<PayeeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayeeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayeeResponse' from JSON`,
  );
}
