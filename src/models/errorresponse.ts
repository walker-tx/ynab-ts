/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ErrorDetail,
  ErrorDetail$inboundSchema,
  ErrorDetail$Outbound,
  ErrorDetail$outboundSchema,
} from "./errordetail.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ErrorResponse = {
  error: ErrorDetail;
};

/** @internal */
export const ErrorResponse$inboundSchema: z.ZodType<
  ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: ErrorDetail$inboundSchema,
});

/** @internal */
export type ErrorResponse$Outbound = {
  error: ErrorDetail$Outbound;
};

/** @internal */
export const ErrorResponse$outboundSchema: z.ZodType<
  ErrorResponse$Outbound,
  z.ZodTypeDef,
  ErrorResponse
> = z.object({
  error: ErrorDetail$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponse$ {
  /** @deprecated use `ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = ErrorResponse$inboundSchema;
  /** @deprecated use `ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = ErrorResponse$outboundSchema;
  /** @deprecated use `ErrorResponse$Outbound` instead. */
  export type Outbound = ErrorResponse$Outbound;
}

export function errorResponseToJSON(errorResponse: ErrorResponse): string {
  return JSON.stringify(ErrorResponse$outboundSchema.parse(errorResponse));
}

export function errorResponseFromJSON(
  jsonString: string,
): SafeParseResult<ErrorResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorResponse' from JSON`,
  );
}
