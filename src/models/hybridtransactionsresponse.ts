/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HybridTransaction,
  HybridTransaction$inboundSchema,
  HybridTransaction$Outbound,
  HybridTransaction$outboundSchema,
} from "./hybridtransaction.js";

export type HybridTransactionsResponseData = {
  transactions: Array<HybridTransaction>;
  /**
   * The knowledge of the server
   */
  serverKnowledge?: number | undefined;
};

export type HybridTransactionsResponse = {
  data: HybridTransactionsResponseData;
};

/** @internal */
export const HybridTransactionsResponseData$inboundSchema: z.ZodType<
  HybridTransactionsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(HybridTransaction$inboundSchema),
  server_knowledge: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type HybridTransactionsResponseData$Outbound = {
  transactions: Array<HybridTransaction$Outbound>;
  server_knowledge?: number | undefined;
};

/** @internal */
export const HybridTransactionsResponseData$outboundSchema: z.ZodType<
  HybridTransactionsResponseData$Outbound,
  z.ZodTypeDef,
  HybridTransactionsResponseData
> = z.object({
  transactions: z.array(HybridTransaction$outboundSchema),
  serverKnowledge: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HybridTransactionsResponseData$ {
  /** @deprecated use `HybridTransactionsResponseData$inboundSchema` instead. */
  export const inboundSchema = HybridTransactionsResponseData$inboundSchema;
  /** @deprecated use `HybridTransactionsResponseData$outboundSchema` instead. */
  export const outboundSchema = HybridTransactionsResponseData$outboundSchema;
  /** @deprecated use `HybridTransactionsResponseData$Outbound` instead. */
  export type Outbound = HybridTransactionsResponseData$Outbound;
}

export function hybridTransactionsResponseDataToJSON(
  hybridTransactionsResponseData: HybridTransactionsResponseData,
): string {
  return JSON.stringify(
    HybridTransactionsResponseData$outboundSchema.parse(
      hybridTransactionsResponseData,
    ),
  );
}

export function hybridTransactionsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<HybridTransactionsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HybridTransactionsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HybridTransactionsResponseData' from JSON`,
  );
}

/** @internal */
export const HybridTransactionsResponse$inboundSchema: z.ZodType<
  HybridTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => HybridTransactionsResponseData$inboundSchema),
});

/** @internal */
export type HybridTransactionsResponse$Outbound = {
  data: HybridTransactionsResponseData$Outbound;
};

/** @internal */
export const HybridTransactionsResponse$outboundSchema: z.ZodType<
  HybridTransactionsResponse$Outbound,
  z.ZodTypeDef,
  HybridTransactionsResponse
> = z.object({
  data: z.lazy(() => HybridTransactionsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HybridTransactionsResponse$ {
  /** @deprecated use `HybridTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = HybridTransactionsResponse$inboundSchema;
  /** @deprecated use `HybridTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = HybridTransactionsResponse$outboundSchema;
  /** @deprecated use `HybridTransactionsResponse$Outbound` instead. */
  export type Outbound = HybridTransactionsResponse$Outbound;
}

export function hybridTransactionsResponseToJSON(
  hybridTransactionsResponse: HybridTransactionsResponse,
): string {
  return JSON.stringify(
    HybridTransactionsResponse$outboundSchema.parse(hybridTransactionsResponse),
  );
}

export function hybridTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<HybridTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HybridTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HybridTransactionsResponse' from JSON`,
  );
}
