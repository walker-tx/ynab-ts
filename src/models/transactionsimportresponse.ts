/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TransactionsImportResponseData = {
  /**
   * The list of transaction ids that were imported.
   */
  transactionIds: Array<string>;
};

export type TransactionsImportResponse = {
  data: TransactionsImportResponseData;
};

/** @internal */
export const TransactionsImportResponseData$inboundSchema: z.ZodType<
  TransactionsImportResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_ids: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    "transaction_ids": "transactionIds",
  });
});

/** @internal */
export type TransactionsImportResponseData$Outbound = {
  transaction_ids: Array<string>;
};

/** @internal */
export const TransactionsImportResponseData$outboundSchema: z.ZodType<
  TransactionsImportResponseData$Outbound,
  z.ZodTypeDef,
  TransactionsImportResponseData
> = z.object({
  transactionIds: z.array(z.string()),
}).transform((v) => {
  return remap$(v, {
    transactionIds: "transaction_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsImportResponseData$ {
  /** @deprecated use `TransactionsImportResponseData$inboundSchema` instead. */
  export const inboundSchema = TransactionsImportResponseData$inboundSchema;
  /** @deprecated use `TransactionsImportResponseData$outboundSchema` instead. */
  export const outboundSchema = TransactionsImportResponseData$outboundSchema;
  /** @deprecated use `TransactionsImportResponseData$Outbound` instead. */
  export type Outbound = TransactionsImportResponseData$Outbound;
}

export function transactionsImportResponseDataToJSON(
  transactionsImportResponseData: TransactionsImportResponseData,
): string {
  return JSON.stringify(
    TransactionsImportResponseData$outboundSchema.parse(
      transactionsImportResponseData,
    ),
  );
}

export function transactionsImportResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsImportResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsImportResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsImportResponseData' from JSON`,
  );
}

/** @internal */
export const TransactionsImportResponse$inboundSchema: z.ZodType<
  TransactionsImportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => TransactionsImportResponseData$inboundSchema),
});

/** @internal */
export type TransactionsImportResponse$Outbound = {
  data: TransactionsImportResponseData$Outbound;
};

/** @internal */
export const TransactionsImportResponse$outboundSchema: z.ZodType<
  TransactionsImportResponse$Outbound,
  z.ZodTypeDef,
  TransactionsImportResponse
> = z.object({
  data: z.lazy(() => TransactionsImportResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionsImportResponse$ {
  /** @deprecated use `TransactionsImportResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionsImportResponse$inboundSchema;
  /** @deprecated use `TransactionsImportResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionsImportResponse$outboundSchema;
  /** @deprecated use `TransactionsImportResponse$Outbound` instead. */
  export type Outbound = TransactionsImportResponse$Outbound;
}

export function transactionsImportResponseToJSON(
  transactionsImportResponse: TransactionsImportResponse,
): string {
  return JSON.stringify(
    TransactionsImportResponse$outboundSchema.parse(transactionsImportResponse),
  );
}

export function transactionsImportResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionsImportResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionsImportResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionsImportResponse' from JSON`,
  );
}
