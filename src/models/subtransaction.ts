/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SubTransaction = {
  id: string;
  transactionId: string;
  /**
   * The subtransaction amount in milliunits format
   */
  amount: number;
  memo?: string | null | undefined;
  payeeId?: string | null | undefined;
  payeeName?: string | null | undefined;
  categoryId?: string | null | undefined;
  categoryName?: string | null | undefined;
  /**
   * If a transfer, the account_id which the subtransaction transfers to
   */
  transferAccountId?: string | null | undefined;
  /**
   * If a transfer, the id of transaction on the other side of the transfer
   */
  transferTransactionId?: string | null | undefined;
  /**
   * Whether or not the subtransaction has been deleted.  Deleted subtransactions will only be included in delta requests.
   */
  deleted: boolean;
};

/** @internal */
export const SubTransaction$inboundSchema: z.ZodType<
  SubTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  transaction_id: z.string(),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  payee_id: z.nullable(z.string()).optional(),
  payee_name: z.nullable(z.string()).optional(),
  category_id: z.nullable(z.string()).optional(),
  category_name: z.nullable(z.string()).optional(),
  transfer_account_id: z.nullable(z.string()).optional(),
  transfer_transaction_id: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "transaction_id": "transactionId",
    "payee_id": "payeeId",
    "payee_name": "payeeName",
    "category_id": "categoryId",
    "category_name": "categoryName",
    "transfer_account_id": "transferAccountId",
    "transfer_transaction_id": "transferTransactionId",
  });
});

/** @internal */
export type SubTransaction$Outbound = {
  id: string;
  transaction_id: string;
  amount: number;
  memo?: string | null | undefined;
  payee_id?: string | null | undefined;
  payee_name?: string | null | undefined;
  category_id?: string | null | undefined;
  category_name?: string | null | undefined;
  transfer_account_id?: string | null | undefined;
  transfer_transaction_id?: string | null | undefined;
  deleted: boolean;
};

/** @internal */
export const SubTransaction$outboundSchema: z.ZodType<
  SubTransaction$Outbound,
  z.ZodTypeDef,
  SubTransaction
> = z.object({
  id: z.string(),
  transactionId: z.string(),
  amount: z.number().int(),
  memo: z.nullable(z.string()).optional(),
  payeeId: z.nullable(z.string()).optional(),
  payeeName: z.nullable(z.string()).optional(),
  categoryId: z.nullable(z.string()).optional(),
  categoryName: z.nullable(z.string()).optional(),
  transferAccountId: z.nullable(z.string()).optional(),
  transferTransactionId: z.nullable(z.string()).optional(),
  deleted: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    transactionId: "transaction_id",
    payeeId: "payee_id",
    payeeName: "payee_name",
    categoryId: "category_id",
    categoryName: "category_name",
    transferAccountId: "transfer_account_id",
    transferTransactionId: "transfer_transaction_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubTransaction$ {
  /** @deprecated use `SubTransaction$inboundSchema` instead. */
  export const inboundSchema = SubTransaction$inboundSchema;
  /** @deprecated use `SubTransaction$outboundSchema` instead. */
  export const outboundSchema = SubTransaction$outboundSchema;
  /** @deprecated use `SubTransaction$Outbound` instead. */
  export type Outbound = SubTransaction$Outbound;
}

export function subTransactionToJSON(subTransaction: SubTransaction): string {
  return JSON.stringify(SubTransaction$outboundSchema.parse(subTransaction));
}

export function subTransactionFromJSON(
  jsonString: string,
): SafeParseResult<SubTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubTransaction' from JSON`,
  );
}
