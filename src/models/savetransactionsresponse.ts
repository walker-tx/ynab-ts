/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransactionDetail,
  TransactionDetail$inboundSchema,
  TransactionDetail$Outbound,
  TransactionDetail$outboundSchema,
} from "./transactiondetail.js";

export type SaveTransactionsResponseData = {
  /**
   * The transaction ids that were saved
   */
  transactionIds: Array<string>;
  transaction?: TransactionDetail | undefined;
  /**
   * If multiple transactions were specified, the transactions that were saved
   */
  transactions?: Array<TransactionDetail> | undefined;
  /**
   * If multiple transactions were specified, a list of import_ids that were not created because of an existing `import_id` found on the same account
   */
  duplicateImportIds?: Array<string> | undefined;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type SaveTransactionsResponse = {
  data: SaveTransactionsResponseData;
};

/** @internal */
export const SaveTransactionsResponseData$inboundSchema: z.ZodType<
  SaveTransactionsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_ids: z.array(z.string()),
  transaction: TransactionDetail$inboundSchema.optional(),
  transactions: z.array(TransactionDetail$inboundSchema).optional(),
  duplicate_import_ids: z.array(z.string()).optional(),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "transaction_ids": "transactionIds",
    "duplicate_import_ids": "duplicateImportIds",
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type SaveTransactionsResponseData$Outbound = {
  transaction_ids: Array<string>;
  transaction?: TransactionDetail$Outbound | undefined;
  transactions?: Array<TransactionDetail$Outbound> | undefined;
  duplicate_import_ids?: Array<string> | undefined;
  server_knowledge: number;
};

/** @internal */
export const SaveTransactionsResponseData$outboundSchema: z.ZodType<
  SaveTransactionsResponseData$Outbound,
  z.ZodTypeDef,
  SaveTransactionsResponseData
> = z.object({
  transactionIds: z.array(z.string()),
  transaction: TransactionDetail$outboundSchema.optional(),
  transactions: z.array(TransactionDetail$outboundSchema).optional(),
  duplicateImportIds: z.array(z.string()).optional(),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    transactionIds: "transaction_ids",
    duplicateImportIds: "duplicate_import_ids",
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveTransactionsResponseData$ {
  /** @deprecated use `SaveTransactionsResponseData$inboundSchema` instead. */
  export const inboundSchema = SaveTransactionsResponseData$inboundSchema;
  /** @deprecated use `SaveTransactionsResponseData$outboundSchema` instead. */
  export const outboundSchema = SaveTransactionsResponseData$outboundSchema;
  /** @deprecated use `SaveTransactionsResponseData$Outbound` instead. */
  export type Outbound = SaveTransactionsResponseData$Outbound;
}

export function saveTransactionsResponseDataToJSON(
  saveTransactionsResponseData: SaveTransactionsResponseData,
): string {
  return JSON.stringify(
    SaveTransactionsResponseData$outboundSchema.parse(
      saveTransactionsResponseData,
    ),
  );
}

export function saveTransactionsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<SaveTransactionsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveTransactionsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveTransactionsResponseData' from JSON`,
  );
}

/** @internal */
export const SaveTransactionsResponse$inboundSchema: z.ZodType<
  SaveTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => SaveTransactionsResponseData$inboundSchema),
});

/** @internal */
export type SaveTransactionsResponse$Outbound = {
  data: SaveTransactionsResponseData$Outbound;
};

/** @internal */
export const SaveTransactionsResponse$outboundSchema: z.ZodType<
  SaveTransactionsResponse$Outbound,
  z.ZodTypeDef,
  SaveTransactionsResponse
> = z.object({
  data: z.lazy(() => SaveTransactionsResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SaveTransactionsResponse$ {
  /** @deprecated use `SaveTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = SaveTransactionsResponse$inboundSchema;
  /** @deprecated use `SaveTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = SaveTransactionsResponse$outboundSchema;
  /** @deprecated use `SaveTransactionsResponse$Outbound` instead. */
  export type Outbound = SaveTransactionsResponse$Outbound;
}

export function saveTransactionsResponseToJSON(
  saveTransactionsResponse: SaveTransactionsResponse,
): string {
  return JSON.stringify(
    SaveTransactionsResponse$outboundSchema.parse(saveTransactionsResponse),
  );
}

export function saveTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<SaveTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SaveTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SaveTransactionsResponse' from JSON`,
  );
}
