/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The date format setting for the budget.  In some cases the format will not be available and will be specified as null.
 */
export type DateFormat = {
  format: string;
};

/** @internal */
export const DateFormat$inboundSchema: z.ZodType<
  DateFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  format: z.string(),
});

/** @internal */
export type DateFormat$Outbound = {
  format: string;
};

/** @internal */
export const DateFormat$outboundSchema: z.ZodType<
  DateFormat$Outbound,
  z.ZodTypeDef,
  DateFormat
> = z.object({
  format: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateFormat$ {
  /** @deprecated use `DateFormat$inboundSchema` instead. */
  export const inboundSchema = DateFormat$inboundSchema;
  /** @deprecated use `DateFormat$outboundSchema` instead. */
  export const outboundSchema = DateFormat$outboundSchema;
  /** @deprecated use `DateFormat$Outbound` instead. */
  export type Outbound = DateFormat$Outbound;
}

export function dateFormatToJSON(dateFormat: DateFormat): string {
  return JSON.stringify(DateFormat$outboundSchema.parse(dateFormat));
}

export function dateFormatFromJSON(
  jsonString: string,
): SafeParseResult<DateFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DateFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DateFormat' from JSON`,
  );
}
