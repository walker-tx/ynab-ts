/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Category,
  Category$inboundSchema,
  Category$Outbound,
  Category$outboundSchema,
} from "./category.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CategoryResponseData = {
  category: Category;
};

export type CategoryResponse = {
  data: CategoryResponseData;
};

/** @internal */
export const CategoryResponseData$inboundSchema: z.ZodType<
  CategoryResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: Category$inboundSchema,
});

/** @internal */
export type CategoryResponseData$Outbound = {
  category: Category$Outbound;
};

/** @internal */
export const CategoryResponseData$outboundSchema: z.ZodType<
  CategoryResponseData$Outbound,
  z.ZodTypeDef,
  CategoryResponseData
> = z.object({
  category: Category$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryResponseData$ {
  /** @deprecated use `CategoryResponseData$inboundSchema` instead. */
  export const inboundSchema = CategoryResponseData$inboundSchema;
  /** @deprecated use `CategoryResponseData$outboundSchema` instead. */
  export const outboundSchema = CategoryResponseData$outboundSchema;
  /** @deprecated use `CategoryResponseData$Outbound` instead. */
  export type Outbound = CategoryResponseData$Outbound;
}

export function categoryResponseDataToJSON(
  categoryResponseData: CategoryResponseData,
): string {
  return JSON.stringify(
    CategoryResponseData$outboundSchema.parse(categoryResponseData),
  );
}

export function categoryResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<CategoryResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryResponseData' from JSON`,
  );
}

/** @internal */
export const CategoryResponse$inboundSchema: z.ZodType<
  CategoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CategoryResponseData$inboundSchema),
});

/** @internal */
export type CategoryResponse$Outbound = {
  data: CategoryResponseData$Outbound;
};

/** @internal */
export const CategoryResponse$outboundSchema: z.ZodType<
  CategoryResponse$Outbound,
  z.ZodTypeDef,
  CategoryResponse
> = z.object({
  data: z.lazy(() => CategoryResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CategoryResponse$ {
  /** @deprecated use `CategoryResponse$inboundSchema` instead. */
  export const inboundSchema = CategoryResponse$inboundSchema;
  /** @deprecated use `CategoryResponse$outboundSchema` instead. */
  export const outboundSchema = CategoryResponse$outboundSchema;
  /** @deprecated use `CategoryResponse$Outbound` instead. */
  export type Outbound = CategoryResponse$Outbound;
}

export function categoryResponseToJSON(
  categoryResponse: CategoryResponse,
): string {
  return JSON.stringify(
    CategoryResponse$outboundSchema.parse(categoryResponse),
  );
}

export function categoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<CategoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CategoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CategoryResponse' from JSON`,
  );
}
