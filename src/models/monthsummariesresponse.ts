/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  MonthSummary,
  MonthSummary$inboundSchema,
  MonthSummary$Outbound,
  MonthSummary$outboundSchema,
} from "./monthsummary.js";

export type MonthSummariesResponseData = {
  months: Array<MonthSummary>;
  /**
   * The knowledge of the server
   */
  serverKnowledge: number;
};

export type MonthSummariesResponse = {
  data: MonthSummariesResponseData;
};

/** @internal */
export const MonthSummariesResponseData$inboundSchema: z.ZodType<
  MonthSummariesResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  months: z.array(MonthSummary$inboundSchema),
  server_knowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "server_knowledge": "serverKnowledge",
  });
});

/** @internal */
export type MonthSummariesResponseData$Outbound = {
  months: Array<MonthSummary$Outbound>;
  server_knowledge: number;
};

/** @internal */
export const MonthSummariesResponseData$outboundSchema: z.ZodType<
  MonthSummariesResponseData$Outbound,
  z.ZodTypeDef,
  MonthSummariesResponseData
> = z.object({
  months: z.array(MonthSummary$outboundSchema),
  serverKnowledge: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    serverKnowledge: "server_knowledge",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MonthSummariesResponseData$ {
  /** @deprecated use `MonthSummariesResponseData$inboundSchema` instead. */
  export const inboundSchema = MonthSummariesResponseData$inboundSchema;
  /** @deprecated use `MonthSummariesResponseData$outboundSchema` instead. */
  export const outboundSchema = MonthSummariesResponseData$outboundSchema;
  /** @deprecated use `MonthSummariesResponseData$Outbound` instead. */
  export type Outbound = MonthSummariesResponseData$Outbound;
}

export function monthSummariesResponseDataToJSON(
  monthSummariesResponseData: MonthSummariesResponseData,
): string {
  return JSON.stringify(
    MonthSummariesResponseData$outboundSchema.parse(monthSummariesResponseData),
  );
}

export function monthSummariesResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<MonthSummariesResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MonthSummariesResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MonthSummariesResponseData' from JSON`,
  );
}

/** @internal */
export const MonthSummariesResponse$inboundSchema: z.ZodType<
  MonthSummariesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => MonthSummariesResponseData$inboundSchema),
});

/** @internal */
export type MonthSummariesResponse$Outbound = {
  data: MonthSummariesResponseData$Outbound;
};

/** @internal */
export const MonthSummariesResponse$outboundSchema: z.ZodType<
  MonthSummariesResponse$Outbound,
  z.ZodTypeDef,
  MonthSummariesResponse
> = z.object({
  data: z.lazy(() => MonthSummariesResponseData$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MonthSummariesResponse$ {
  /** @deprecated use `MonthSummariesResponse$inboundSchema` instead. */
  export const inboundSchema = MonthSummariesResponse$inboundSchema;
  /** @deprecated use `MonthSummariesResponse$outboundSchema` instead. */
  export const outboundSchema = MonthSummariesResponse$outboundSchema;
  /** @deprecated use `MonthSummariesResponse$Outbound` instead. */
  export type Outbound = MonthSummariesResponse$Outbound;
}

export function monthSummariesResponseToJSON(
  monthSummariesResponse: MonthSummariesResponse,
): string {
  return JSON.stringify(
    MonthSummariesResponse$outboundSchema.parse(monthSummariesResponse),
  );
}

export function monthSummariesResponseFromJSON(
  jsonString: string,
): SafeParseResult<MonthSummariesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MonthSummariesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MonthSummariesResponse' from JSON`,
  );
}
