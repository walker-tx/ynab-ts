/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateTransactionsRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The transactions to update. Each transaction must have either an `id` or `import_id` specified. If `id` is specified as null an `import_id` value can be provided which will allow transaction(s) to be updated by its `import_id`. If an `id` is specified, it will always be used for lookup.  You should not specify both `id` and `import_id`.  Updating an `import_id` on an existing transaction is not allowed; if an `import_id` is specified, it will only be used to lookup the transaction.
   */
  patchTransactionsWrapper: models.PatchTransactionsWrapper;
};

/** @internal */
export const UpdateTransactionsRequest$inboundSchema: z.ZodType<
  UpdateTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  PatchTransactionsWrapper: models.PatchTransactionsWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "PatchTransactionsWrapper": "patchTransactionsWrapper",
  });
});

/** @internal */
export type UpdateTransactionsRequest$Outbound = {
  budget_id: string;
  PatchTransactionsWrapper: models.PatchTransactionsWrapper$Outbound;
};

/** @internal */
export const UpdateTransactionsRequest$outboundSchema: z.ZodType<
  UpdateTransactionsRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransactionsRequest
> = z.object({
  budgetId: z.string(),
  patchTransactionsWrapper: models.PatchTransactionsWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    patchTransactionsWrapper: "PatchTransactionsWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionsRequest$ {
  /** @deprecated use `UpdateTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionsRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionsRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionsRequest$Outbound` instead. */
  export type Outbound = UpdateTransactionsRequest$Outbound;
}

export function updateTransactionsRequestToJSON(
  updateTransactionsRequest: UpdateTransactionsRequest,
): string {
  return JSON.stringify(
    UpdateTransactionsRequest$outboundSchema.parse(updateTransactionsRequest),
  );
}

export function updateTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionsRequest' from JSON`,
  );
}
