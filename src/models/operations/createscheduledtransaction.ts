/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateScheduledTransactionRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The scheduled transaction to create
   */
  postScheduledTransactionWrapper: models.PostScheduledTransactionWrapper;
};

/** @internal */
export const CreateScheduledTransactionRequest$inboundSchema: z.ZodType<
  CreateScheduledTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  PostScheduledTransactionWrapper:
    models.PostScheduledTransactionWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "PostScheduledTransactionWrapper": "postScheduledTransactionWrapper",
  });
});

/** @internal */
export type CreateScheduledTransactionRequest$Outbound = {
  budget_id: string;
  PostScheduledTransactionWrapper:
    models.PostScheduledTransactionWrapper$Outbound;
};

/** @internal */
export const CreateScheduledTransactionRequest$outboundSchema: z.ZodType<
  CreateScheduledTransactionRequest$Outbound,
  z.ZodTypeDef,
  CreateScheduledTransactionRequest
> = z.object({
  budgetId: z.string(),
  postScheduledTransactionWrapper:
    models.PostScheduledTransactionWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    postScheduledTransactionWrapper: "PostScheduledTransactionWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduledTransactionRequest$ {
  /** @deprecated use `CreateScheduledTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = CreateScheduledTransactionRequest$inboundSchema;
  /** @deprecated use `CreateScheduledTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateScheduledTransactionRequest$outboundSchema;
  /** @deprecated use `CreateScheduledTransactionRequest$Outbound` instead. */
  export type Outbound = CreateScheduledTransactionRequest$Outbound;
}

export function createScheduledTransactionRequestToJSON(
  createScheduledTransactionRequest: CreateScheduledTransactionRequest,
): string {
  return JSON.stringify(
    CreateScheduledTransactionRequest$outboundSchema.parse(
      createScheduledTransactionRequest,
    ),
  );
}

export function createScheduledTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateScheduledTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateScheduledTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateScheduledTransactionRequest' from JSON`,
  );
}
