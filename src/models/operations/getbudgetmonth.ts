/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetBudgetMonthRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))
   */
  month: RFCDate;
};

export type GetBudgetMonthResponse =
  | models.MonthDetailResponse
  | models.ErrorResponse;

/** @internal */
export const GetBudgetMonthRequest$inboundSchema: z.ZodType<
  GetBudgetMonthRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  month: z.string().transform(v => new RFCDate(v)),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
  });
});

/** @internal */
export type GetBudgetMonthRequest$Outbound = {
  budget_id: string;
  month: string;
};

/** @internal */
export const GetBudgetMonthRequest$outboundSchema: z.ZodType<
  GetBudgetMonthRequest$Outbound,
  z.ZodTypeDef,
  GetBudgetMonthRequest
> = z.object({
  budgetId: z.string(),
  month: z.instanceof(RFCDate).transform(v => v.toString()),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetMonthRequest$ {
  /** @deprecated use `GetBudgetMonthRequest$inboundSchema` instead. */
  export const inboundSchema = GetBudgetMonthRequest$inboundSchema;
  /** @deprecated use `GetBudgetMonthRequest$outboundSchema` instead. */
  export const outboundSchema = GetBudgetMonthRequest$outboundSchema;
  /** @deprecated use `GetBudgetMonthRequest$Outbound` instead. */
  export type Outbound = GetBudgetMonthRequest$Outbound;
}

export function getBudgetMonthRequestToJSON(
  getBudgetMonthRequest: GetBudgetMonthRequest,
): string {
  return JSON.stringify(
    GetBudgetMonthRequest$outboundSchema.parse(getBudgetMonthRequest),
  );
}

export function getBudgetMonthRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetMonthRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetMonthRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetMonthRequest' from JSON`,
  );
}

/** @internal */
export const GetBudgetMonthResponse$inboundSchema: z.ZodType<
  GetBudgetMonthResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.MonthDetailResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetBudgetMonthResponse$Outbound =
  | models.MonthDetailResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetBudgetMonthResponse$outboundSchema: z.ZodType<
  GetBudgetMonthResponse$Outbound,
  z.ZodTypeDef,
  GetBudgetMonthResponse
> = z.union([
  models.MonthDetailResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetMonthResponse$ {
  /** @deprecated use `GetBudgetMonthResponse$inboundSchema` instead. */
  export const inboundSchema = GetBudgetMonthResponse$inboundSchema;
  /** @deprecated use `GetBudgetMonthResponse$outboundSchema` instead. */
  export const outboundSchema = GetBudgetMonthResponse$outboundSchema;
  /** @deprecated use `GetBudgetMonthResponse$Outbound` instead. */
  export type Outbound = GetBudgetMonthResponse$Outbound;
}

export function getBudgetMonthResponseToJSON(
  getBudgetMonthResponse: GetBudgetMonthResponse,
): string {
  return JSON.stringify(
    GetBudgetMonthResponse$outboundSchema.parse(getBudgetMonthResponse),
  );
}

export function getBudgetMonthResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetMonthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetMonthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetMonthResponse' from JSON`,
  );
}
