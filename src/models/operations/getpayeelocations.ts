/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetPayeeLocationsRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
};

export type GetPayeeLocationsResponse =
  | models.PayeeLocationsResponse
  | models.ErrorResponse;

/** @internal */
export const GetPayeeLocationsRequest$inboundSchema: z.ZodType<
  GetPayeeLocationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
  });
});

/** @internal */
export type GetPayeeLocationsRequest$Outbound = {
  budget_id: string;
};

/** @internal */
export const GetPayeeLocationsRequest$outboundSchema: z.ZodType<
  GetPayeeLocationsRequest$Outbound,
  z.ZodTypeDef,
  GetPayeeLocationsRequest
> = z.object({
  budgetId: z.string(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayeeLocationsRequest$ {
  /** @deprecated use `GetPayeeLocationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetPayeeLocationsRequest$inboundSchema;
  /** @deprecated use `GetPayeeLocationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetPayeeLocationsRequest$outboundSchema;
  /** @deprecated use `GetPayeeLocationsRequest$Outbound` instead. */
  export type Outbound = GetPayeeLocationsRequest$Outbound;
}

export function getPayeeLocationsRequestToJSON(
  getPayeeLocationsRequest: GetPayeeLocationsRequest,
): string {
  return JSON.stringify(
    GetPayeeLocationsRequest$outboundSchema.parse(getPayeeLocationsRequest),
  );
}

export function getPayeeLocationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPayeeLocationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayeeLocationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayeeLocationsRequest' from JSON`,
  );
}

/** @internal */
export const GetPayeeLocationsResponse$inboundSchema: z.ZodType<
  GetPayeeLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.PayeeLocationsResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetPayeeLocationsResponse$Outbound =
  | models.PayeeLocationsResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetPayeeLocationsResponse$outboundSchema: z.ZodType<
  GetPayeeLocationsResponse$Outbound,
  z.ZodTypeDef,
  GetPayeeLocationsResponse
> = z.union([
  models.PayeeLocationsResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayeeLocationsResponse$ {
  /** @deprecated use `GetPayeeLocationsResponse$inboundSchema` instead. */
  export const inboundSchema = GetPayeeLocationsResponse$inboundSchema;
  /** @deprecated use `GetPayeeLocationsResponse$outboundSchema` instead. */
  export const outboundSchema = GetPayeeLocationsResponse$outboundSchema;
  /** @deprecated use `GetPayeeLocationsResponse$Outbound` instead. */
  export type Outbound = GetPayeeLocationsResponse$Outbound;
}

export function getPayeeLocationsResponseToJSON(
  getPayeeLocationsResponse: GetPayeeLocationsResponse,
): string {
  return JSON.stringify(
    GetPayeeLocationsResponse$outboundSchema.parse(getPayeeLocationsResponse),
  );
}

export function getPayeeLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPayeeLocationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayeeLocationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayeeLocationsResponse' from JSON`,
  );
}
