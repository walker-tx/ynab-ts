/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetCategoryByIdRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the category
   */
  categoryId: string;
};

export type GetCategoryByIdResponse =
  | models.CategoryResponse
  | models.ErrorResponse;

/** @internal */
export const GetCategoryByIdRequest$inboundSchema: z.ZodType<
  GetCategoryByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  category_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "category_id": "categoryId",
  });
});

/** @internal */
export type GetCategoryByIdRequest$Outbound = {
  budget_id: string;
  category_id: string;
};

/** @internal */
export const GetCategoryByIdRequest$outboundSchema: z.ZodType<
  GetCategoryByIdRequest$Outbound,
  z.ZodTypeDef,
  GetCategoryByIdRequest
> = z.object({
  budgetId: z.string(),
  categoryId: z.string(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    categoryId: "category_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCategoryByIdRequest$ {
  /** @deprecated use `GetCategoryByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetCategoryByIdRequest$inboundSchema;
  /** @deprecated use `GetCategoryByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetCategoryByIdRequest$outboundSchema;
  /** @deprecated use `GetCategoryByIdRequest$Outbound` instead. */
  export type Outbound = GetCategoryByIdRequest$Outbound;
}

export function getCategoryByIdRequestToJSON(
  getCategoryByIdRequest: GetCategoryByIdRequest,
): string {
  return JSON.stringify(
    GetCategoryByIdRequest$outboundSchema.parse(getCategoryByIdRequest),
  );
}

export function getCategoryByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCategoryByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCategoryByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCategoryByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetCategoryByIdResponse$inboundSchema: z.ZodType<
  GetCategoryByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.CategoryResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetCategoryByIdResponse$Outbound =
  | models.CategoryResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetCategoryByIdResponse$outboundSchema: z.ZodType<
  GetCategoryByIdResponse$Outbound,
  z.ZodTypeDef,
  GetCategoryByIdResponse
> = z.union([
  models.CategoryResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCategoryByIdResponse$ {
  /** @deprecated use `GetCategoryByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetCategoryByIdResponse$inboundSchema;
  /** @deprecated use `GetCategoryByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetCategoryByIdResponse$outboundSchema;
  /** @deprecated use `GetCategoryByIdResponse$Outbound` instead. */
  export type Outbound = GetCategoryByIdResponse$Outbound;
}

export function getCategoryByIdResponseToJSON(
  getCategoryByIdResponse: GetCategoryByIdResponse,
): string {
  return JSON.stringify(
    GetCategoryByIdResponse$outboundSchema.parse(getCategoryByIdResponse),
  );
}

export function getCategoryByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCategoryByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCategoryByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCategoryByIdResponse' from JSON`,
  );
}
