/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export const GetTransactionsByCategoryType = {
  Uncategorized: "uncategorized",
  Unapproved: "unapproved",
} as const;
/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export type GetTransactionsByCategoryType = ClosedEnum<
  typeof GetTransactionsByCategoryType
>;

export type GetTransactionsByCategoryRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the category
   */
  categoryId: string;
  /**
   * If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
   */
  sinceDate?: RFCDate | undefined;
  /**
   * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
   */
  type?: GetTransactionsByCategoryType | undefined;
  /**
   * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
   */
  lastKnowledgeOfServer?: number | undefined;
};

export type GetTransactionsByCategoryResponse =
  | models.HybridTransactionsResponse
  | models.ErrorResponse;

/** @internal */
export const GetTransactionsByCategoryType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByCategoryType
> = z.nativeEnum(GetTransactionsByCategoryType);

/** @internal */
export const GetTransactionsByCategoryType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByCategoryType
> = GetTransactionsByCategoryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByCategoryType$ {
  /** @deprecated use `GetTransactionsByCategoryType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByCategoryType$inboundSchema;
  /** @deprecated use `GetTransactionsByCategoryType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByCategoryType$outboundSchema;
}

/** @internal */
export const GetTransactionsByCategoryRequest$inboundSchema: z.ZodType<
  GetTransactionsByCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  category_id: z.string(),
  since_date: z.string().transform(v => new RFCDate(v)).optional(),
  type: GetTransactionsByCategoryType$inboundSchema.optional(),
  last_knowledge_of_server: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "category_id": "categoryId",
    "since_date": "sinceDate",
    "last_knowledge_of_server": "lastKnowledgeOfServer",
  });
});

/** @internal */
export type GetTransactionsByCategoryRequest$Outbound = {
  budget_id: string;
  category_id: string;
  since_date?: string | undefined;
  type?: string | undefined;
  last_knowledge_of_server?: number | undefined;
};

/** @internal */
export const GetTransactionsByCategoryRequest$outboundSchema: z.ZodType<
  GetTransactionsByCategoryRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsByCategoryRequest
> = z.object({
  budgetId: z.string(),
  categoryId: z.string(),
  sinceDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  type: GetTransactionsByCategoryType$outboundSchema.optional(),
  lastKnowledgeOfServer: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    categoryId: "category_id",
    sinceDate: "since_date",
    lastKnowledgeOfServer: "last_knowledge_of_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByCategoryRequest$ {
  /** @deprecated use `GetTransactionsByCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByCategoryRequest$inboundSchema;
  /** @deprecated use `GetTransactionsByCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByCategoryRequest$outboundSchema;
  /** @deprecated use `GetTransactionsByCategoryRequest$Outbound` instead. */
  export type Outbound = GetTransactionsByCategoryRequest$Outbound;
}

export function getTransactionsByCategoryRequestToJSON(
  getTransactionsByCategoryRequest: GetTransactionsByCategoryRequest,
): string {
  return JSON.stringify(
    GetTransactionsByCategoryRequest$outboundSchema.parse(
      getTransactionsByCategoryRequest,
    ),
  );
}

export function getTransactionsByCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsByCategoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsByCategoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsByCategoryRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionsByCategoryResponse$inboundSchema: z.ZodType<
  GetTransactionsByCategoryResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.HybridTransactionsResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetTransactionsByCategoryResponse$Outbound =
  | models.HybridTransactionsResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetTransactionsByCategoryResponse$outboundSchema: z.ZodType<
  GetTransactionsByCategoryResponse$Outbound,
  z.ZodTypeDef,
  GetTransactionsByCategoryResponse
> = z.union([
  models.HybridTransactionsResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByCategoryResponse$ {
  /** @deprecated use `GetTransactionsByCategoryResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByCategoryResponse$inboundSchema;
  /** @deprecated use `GetTransactionsByCategoryResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetTransactionsByCategoryResponse$outboundSchema;
  /** @deprecated use `GetTransactionsByCategoryResponse$Outbound` instead. */
  export type Outbound = GetTransactionsByCategoryResponse$Outbound;
}

export function getTransactionsByCategoryResponseToJSON(
  getTransactionsByCategoryResponse: GetTransactionsByCategoryResponse,
): string {
  return JSON.stringify(
    GetTransactionsByCategoryResponse$outboundSchema.parse(
      getTransactionsByCategoryResponse,
    ),
  );
}

export function getTransactionsByCategoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsByCategoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsByCategoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsByCategoryResponse' from JSON`,
  );
}
