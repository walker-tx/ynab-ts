/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateScheduledTransactionRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the scheduled transaction
   */
  scheduledTransactionId: string;
  /**
   * The scheduled transaction to update
   */
  putScheduledTransactionWrapper: models.PutScheduledTransactionWrapper;
};

/** @internal */
export const UpdateScheduledTransactionRequest$inboundSchema: z.ZodType<
  UpdateScheduledTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  scheduled_transaction_id: z.string(),
  PutScheduledTransactionWrapper:
    models.PutScheduledTransactionWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "scheduled_transaction_id": "scheduledTransactionId",
    "PutScheduledTransactionWrapper": "putScheduledTransactionWrapper",
  });
});

/** @internal */
export type UpdateScheduledTransactionRequest$Outbound = {
  budget_id: string;
  scheduled_transaction_id: string;
  PutScheduledTransactionWrapper:
    models.PutScheduledTransactionWrapper$Outbound;
};

/** @internal */
export const UpdateScheduledTransactionRequest$outboundSchema: z.ZodType<
  UpdateScheduledTransactionRequest$Outbound,
  z.ZodTypeDef,
  UpdateScheduledTransactionRequest
> = z.object({
  budgetId: z.string(),
  scheduledTransactionId: z.string(),
  putScheduledTransactionWrapper:
    models.PutScheduledTransactionWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    scheduledTransactionId: "scheduled_transaction_id",
    putScheduledTransactionWrapper: "PutScheduledTransactionWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduledTransactionRequest$ {
  /** @deprecated use `UpdateScheduledTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateScheduledTransactionRequest$inboundSchema;
  /** @deprecated use `UpdateScheduledTransactionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateScheduledTransactionRequest$outboundSchema;
  /** @deprecated use `UpdateScheduledTransactionRequest$Outbound` instead. */
  export type Outbound = UpdateScheduledTransactionRequest$Outbound;
}

export function updateScheduledTransactionRequestToJSON(
  updateScheduledTransactionRequest: UpdateScheduledTransactionRequest,
): string {
  return JSON.stringify(
    UpdateScheduledTransactionRequest$outboundSchema.parse(
      updateScheduledTransactionRequest,
    ),
  );
}

export function updateScheduledTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateScheduledTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateScheduledTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateScheduledTransactionRequest' from JSON`,
  );
}
