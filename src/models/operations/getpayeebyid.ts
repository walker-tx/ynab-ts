/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetPayeeByIdRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the payee
   */
  payeeId: string;
};

export type GetPayeeByIdResponse = models.PayeeResponse | models.ErrorResponse;

/** @internal */
export const GetPayeeByIdRequest$inboundSchema: z.ZodType<
  GetPayeeByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  payee_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "payee_id": "payeeId",
  });
});

/** @internal */
export type GetPayeeByIdRequest$Outbound = {
  budget_id: string;
  payee_id: string;
};

/** @internal */
export const GetPayeeByIdRequest$outboundSchema: z.ZodType<
  GetPayeeByIdRequest$Outbound,
  z.ZodTypeDef,
  GetPayeeByIdRequest
> = z.object({
  budgetId: z.string(),
  payeeId: z.string(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    payeeId: "payee_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayeeByIdRequest$ {
  /** @deprecated use `GetPayeeByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetPayeeByIdRequest$inboundSchema;
  /** @deprecated use `GetPayeeByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetPayeeByIdRequest$outboundSchema;
  /** @deprecated use `GetPayeeByIdRequest$Outbound` instead. */
  export type Outbound = GetPayeeByIdRequest$Outbound;
}

export function getPayeeByIdRequestToJSON(
  getPayeeByIdRequest: GetPayeeByIdRequest,
): string {
  return JSON.stringify(
    GetPayeeByIdRequest$outboundSchema.parse(getPayeeByIdRequest),
  );
}

export function getPayeeByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPayeeByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayeeByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayeeByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetPayeeByIdResponse$inboundSchema: z.ZodType<
  GetPayeeByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.PayeeResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetPayeeByIdResponse$Outbound =
  | models.PayeeResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetPayeeByIdResponse$outboundSchema: z.ZodType<
  GetPayeeByIdResponse$Outbound,
  z.ZodTypeDef,
  GetPayeeByIdResponse
> = z.union([
  models.PayeeResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPayeeByIdResponse$ {
  /** @deprecated use `GetPayeeByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetPayeeByIdResponse$inboundSchema;
  /** @deprecated use `GetPayeeByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetPayeeByIdResponse$outboundSchema;
  /** @deprecated use `GetPayeeByIdResponse$Outbound` instead. */
  export type Outbound = GetPayeeByIdResponse$Outbound;
}

export function getPayeeByIdResponseToJSON(
  getPayeeByIdResponse: GetPayeeByIdResponse,
): string {
  return JSON.stringify(
    GetPayeeByIdResponse$outboundSchema.parse(getPayeeByIdResponse),
  );
}

export function getPayeeByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPayeeByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPayeeByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPayeeByIdResponse' from JSON`,
  );
}
