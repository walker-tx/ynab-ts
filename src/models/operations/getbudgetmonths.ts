/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetBudgetMonthsRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
   */
  lastKnowledgeOfServer?: number | undefined;
};

export type GetBudgetMonthsResponse =
  | models.MonthSummariesResponse
  | models.ErrorResponse;

/** @internal */
export const GetBudgetMonthsRequest$inboundSchema: z.ZodType<
  GetBudgetMonthsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  last_knowledge_of_server: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "last_knowledge_of_server": "lastKnowledgeOfServer",
  });
});

/** @internal */
export type GetBudgetMonthsRequest$Outbound = {
  budget_id: string;
  last_knowledge_of_server?: number | undefined;
};

/** @internal */
export const GetBudgetMonthsRequest$outboundSchema: z.ZodType<
  GetBudgetMonthsRequest$Outbound,
  z.ZodTypeDef,
  GetBudgetMonthsRequest
> = z.object({
  budgetId: z.string(),
  lastKnowledgeOfServer: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    lastKnowledgeOfServer: "last_knowledge_of_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetMonthsRequest$ {
  /** @deprecated use `GetBudgetMonthsRequest$inboundSchema` instead. */
  export const inboundSchema = GetBudgetMonthsRequest$inboundSchema;
  /** @deprecated use `GetBudgetMonthsRequest$outboundSchema` instead. */
  export const outboundSchema = GetBudgetMonthsRequest$outboundSchema;
  /** @deprecated use `GetBudgetMonthsRequest$Outbound` instead. */
  export type Outbound = GetBudgetMonthsRequest$Outbound;
}

export function getBudgetMonthsRequestToJSON(
  getBudgetMonthsRequest: GetBudgetMonthsRequest,
): string {
  return JSON.stringify(
    GetBudgetMonthsRequest$outboundSchema.parse(getBudgetMonthsRequest),
  );
}

export function getBudgetMonthsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetMonthsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetMonthsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetMonthsRequest' from JSON`,
  );
}

/** @internal */
export const GetBudgetMonthsResponse$inboundSchema: z.ZodType<
  GetBudgetMonthsResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.MonthSummariesResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetBudgetMonthsResponse$Outbound =
  | models.MonthSummariesResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetBudgetMonthsResponse$outboundSchema: z.ZodType<
  GetBudgetMonthsResponse$Outbound,
  z.ZodTypeDef,
  GetBudgetMonthsResponse
> = z.union([
  models.MonthSummariesResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetMonthsResponse$ {
  /** @deprecated use `GetBudgetMonthsResponse$inboundSchema` instead. */
  export const inboundSchema = GetBudgetMonthsResponse$inboundSchema;
  /** @deprecated use `GetBudgetMonthsResponse$outboundSchema` instead. */
  export const outboundSchema = GetBudgetMonthsResponse$outboundSchema;
  /** @deprecated use `GetBudgetMonthsResponse$Outbound` instead. */
  export type Outbound = GetBudgetMonthsResponse$Outbound;
}

export function getBudgetMonthsResponseToJSON(
  getBudgetMonthsResponse: GetBudgetMonthsResponse,
): string {
  return JSON.stringify(
    GetBudgetMonthsResponse$outboundSchema.parse(getBudgetMonthsResponse),
  );
}

export function getBudgetMonthsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetMonthsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetMonthsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetMonthsResponse' from JSON`,
  );
}
