/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export const GetTransactionsByPayeeType = {
  Uncategorized: "uncategorized",
  Unapproved: "unapproved",
} as const;
/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export type GetTransactionsByPayeeType = ClosedEnum<
  typeof GetTransactionsByPayeeType
>;

export type GetTransactionsByPayeeRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the payee
   */
  payeeId: string;
  /**
   * If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
   */
  sinceDate?: RFCDate | undefined;
  /**
   * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
   */
  type?: GetTransactionsByPayeeType | undefined;
  /**
   * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
   */
  lastKnowledgeOfServer?: number | undefined;
};

export type GetTransactionsByPayeeResponse =
  | models.HybridTransactionsResponse
  | models.ErrorResponse;

/** @internal */
export const GetTransactionsByPayeeType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByPayeeType
> = z.nativeEnum(GetTransactionsByPayeeType);

/** @internal */
export const GetTransactionsByPayeeType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByPayeeType
> = GetTransactionsByPayeeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByPayeeType$ {
  /** @deprecated use `GetTransactionsByPayeeType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByPayeeType$inboundSchema;
  /** @deprecated use `GetTransactionsByPayeeType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByPayeeType$outboundSchema;
}

/** @internal */
export const GetTransactionsByPayeeRequest$inboundSchema: z.ZodType<
  GetTransactionsByPayeeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  payee_id: z.string(),
  since_date: z.string().transform(v => new RFCDate(v)).optional(),
  type: GetTransactionsByPayeeType$inboundSchema.optional(),
  last_knowledge_of_server: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "payee_id": "payeeId",
    "since_date": "sinceDate",
    "last_knowledge_of_server": "lastKnowledgeOfServer",
  });
});

/** @internal */
export type GetTransactionsByPayeeRequest$Outbound = {
  budget_id: string;
  payee_id: string;
  since_date?: string | undefined;
  type?: string | undefined;
  last_knowledge_of_server?: number | undefined;
};

/** @internal */
export const GetTransactionsByPayeeRequest$outboundSchema: z.ZodType<
  GetTransactionsByPayeeRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsByPayeeRequest
> = z.object({
  budgetId: z.string(),
  payeeId: z.string(),
  sinceDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  type: GetTransactionsByPayeeType$outboundSchema.optional(),
  lastKnowledgeOfServer: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    payeeId: "payee_id",
    sinceDate: "since_date",
    lastKnowledgeOfServer: "last_knowledge_of_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByPayeeRequest$ {
  /** @deprecated use `GetTransactionsByPayeeRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByPayeeRequest$inboundSchema;
  /** @deprecated use `GetTransactionsByPayeeRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByPayeeRequest$outboundSchema;
  /** @deprecated use `GetTransactionsByPayeeRequest$Outbound` instead. */
  export type Outbound = GetTransactionsByPayeeRequest$Outbound;
}

export function getTransactionsByPayeeRequestToJSON(
  getTransactionsByPayeeRequest: GetTransactionsByPayeeRequest,
): string {
  return JSON.stringify(
    GetTransactionsByPayeeRequest$outboundSchema.parse(
      getTransactionsByPayeeRequest,
    ),
  );
}

export function getTransactionsByPayeeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsByPayeeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsByPayeeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsByPayeeRequest' from JSON`,
  );
}

/** @internal */
export const GetTransactionsByPayeeResponse$inboundSchema: z.ZodType<
  GetTransactionsByPayeeResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.HybridTransactionsResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetTransactionsByPayeeResponse$Outbound =
  | models.HybridTransactionsResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetTransactionsByPayeeResponse$outboundSchema: z.ZodType<
  GetTransactionsByPayeeResponse$Outbound,
  z.ZodTypeDef,
  GetTransactionsByPayeeResponse
> = z.union([
  models.HybridTransactionsResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByPayeeResponse$ {
  /** @deprecated use `GetTransactionsByPayeeResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByPayeeResponse$inboundSchema;
  /** @deprecated use `GetTransactionsByPayeeResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByPayeeResponse$outboundSchema;
  /** @deprecated use `GetTransactionsByPayeeResponse$Outbound` instead. */
  export type Outbound = GetTransactionsByPayeeResponse$Outbound;
}

export function getTransactionsByPayeeResponseToJSON(
  getTransactionsByPayeeResponse: GetTransactionsByPayeeResponse,
): string {
  return JSON.stringify(
    GetTransactionsByPayeeResponse$outboundSchema.parse(
      getTransactionsByPayeeResponse,
    ),
  );
}

export function getTransactionsByPayeeResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsByPayeeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsByPayeeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsByPayeeResponse' from JSON`,
  );
}
