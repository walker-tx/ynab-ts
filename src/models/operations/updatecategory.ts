/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateCategoryRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the category
   */
  categoryId: string;
  /**
   * The category to update
   */
  patchCategoryWrapper: models.PatchCategoryWrapper;
};

/** @internal */
export const UpdateCategoryRequest$inboundSchema: z.ZodType<
  UpdateCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  category_id: z.string(),
  PatchCategoryWrapper: models.PatchCategoryWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "category_id": "categoryId",
    "PatchCategoryWrapper": "patchCategoryWrapper",
  });
});

/** @internal */
export type UpdateCategoryRequest$Outbound = {
  budget_id: string;
  category_id: string;
  PatchCategoryWrapper: models.PatchCategoryWrapper$Outbound;
};

/** @internal */
export const UpdateCategoryRequest$outboundSchema: z.ZodType<
  UpdateCategoryRequest$Outbound,
  z.ZodTypeDef,
  UpdateCategoryRequest
> = z.object({
  budgetId: z.string(),
  categoryId: z.string(),
  patchCategoryWrapper: models.PatchCategoryWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    categoryId: "category_id",
    patchCategoryWrapper: "PatchCategoryWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCategoryRequest$ {
  /** @deprecated use `UpdateCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCategoryRequest$inboundSchema;
  /** @deprecated use `UpdateCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCategoryRequest$outboundSchema;
  /** @deprecated use `UpdateCategoryRequest$Outbound` instead. */
  export type Outbound = UpdateCategoryRequest$Outbound;
}

export function updateCategoryRequestToJSON(
  updateCategoryRequest: UpdateCategoryRequest,
): string {
  return JSON.stringify(
    UpdateCategoryRequest$outboundSchema.parse(updateCategoryRequest),
  );
}

export function updateCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCategoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCategoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCategoryRequest' from JSON`,
  );
}
