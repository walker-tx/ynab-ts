/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetBudgetsRequest = {
  /**
   * Whether to include the list of budget accounts
   */
  includeAccounts?: boolean | undefined;
};

/** @internal */
export const GetBudgetsRequest$inboundSchema: z.ZodType<
  GetBudgetsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include_accounts: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "include_accounts": "includeAccounts",
  });
});

/** @internal */
export type GetBudgetsRequest$Outbound = {
  include_accounts?: boolean | undefined;
};

/** @internal */
export const GetBudgetsRequest$outboundSchema: z.ZodType<
  GetBudgetsRequest$Outbound,
  z.ZodTypeDef,
  GetBudgetsRequest
> = z.object({
  includeAccounts: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    includeAccounts: "include_accounts",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBudgetsRequest$ {
  /** @deprecated use `GetBudgetsRequest$inboundSchema` instead. */
  export const inboundSchema = GetBudgetsRequest$inboundSchema;
  /** @deprecated use `GetBudgetsRequest$outboundSchema` instead. */
  export const outboundSchema = GetBudgetsRequest$outboundSchema;
  /** @deprecated use `GetBudgetsRequest$Outbound` instead. */
  export type Outbound = GetBudgetsRequest$Outbound;
}

export function getBudgetsRequestToJSON(
  getBudgetsRequest: GetBudgetsRequest,
): string {
  return JSON.stringify(
    GetBudgetsRequest$outboundSchema.parse(getBudgetsRequest),
  );
}

export function getBudgetsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBudgetsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBudgetsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBudgetsRequest' from JSON`,
  );
}
