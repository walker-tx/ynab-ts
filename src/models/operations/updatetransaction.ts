/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateTransactionRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the transaction
   */
  transactionId: string;
  /**
   * The transaction to update
   */
  putTransactionWrapper: models.PutTransactionWrapper;
};

/** @internal */
export const UpdateTransactionRequest$inboundSchema: z.ZodType<
  UpdateTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  transaction_id: z.string(),
  PutTransactionWrapper: models.PutTransactionWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "transaction_id": "transactionId",
    "PutTransactionWrapper": "putTransactionWrapper",
  });
});

/** @internal */
export type UpdateTransactionRequest$Outbound = {
  budget_id: string;
  transaction_id: string;
  PutTransactionWrapper: models.PutTransactionWrapper$Outbound;
};

/** @internal */
export const UpdateTransactionRequest$outboundSchema: z.ZodType<
  UpdateTransactionRequest$Outbound,
  z.ZodTypeDef,
  UpdateTransactionRequest
> = z.object({
  budgetId: z.string(),
  transactionId: z.string(),
  putTransactionWrapper: models.PutTransactionWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    transactionId: "transaction_id",
    putTransactionWrapper: "PutTransactionWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateTransactionRequest$ {
  /** @deprecated use `UpdateTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateTransactionRequest$inboundSchema;
  /** @deprecated use `UpdateTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateTransactionRequest$outboundSchema;
  /** @deprecated use `UpdateTransactionRequest$Outbound` instead. */
  export type Outbound = UpdateTransactionRequest$Outbound;
}

export function updateTransactionRequestToJSON(
  updateTransactionRequest: UpdateTransactionRequest,
): string {
  return JSON.stringify(
    UpdateTransactionRequest$outboundSchema.parse(updateTransactionRequest),
  );
}

export function updateTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateTransactionRequest' from JSON`,
  );
}
