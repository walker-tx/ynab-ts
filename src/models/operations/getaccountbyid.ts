/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetAccountByIdRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the account
   */
  accountId: string;
};

export type GetAccountByIdResponse =
  | models.AccountResponse
  | models.ErrorResponse;

/** @internal */
export const GetAccountByIdRequest$inboundSchema: z.ZodType<
  GetAccountByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "account_id": "accountId",
  });
});

/** @internal */
export type GetAccountByIdRequest$Outbound = {
  budget_id: string;
  account_id: string;
};

/** @internal */
export const GetAccountByIdRequest$outboundSchema: z.ZodType<
  GetAccountByIdRequest$Outbound,
  z.ZodTypeDef,
  GetAccountByIdRequest
> = z.object({
  budgetId: z.string(),
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountByIdRequest$ {
  /** @deprecated use `GetAccountByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetAccountByIdRequest$inboundSchema;
  /** @deprecated use `GetAccountByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetAccountByIdRequest$outboundSchema;
  /** @deprecated use `GetAccountByIdRequest$Outbound` instead. */
  export type Outbound = GetAccountByIdRequest$Outbound;
}

export function getAccountByIdRequestToJSON(
  getAccountByIdRequest: GetAccountByIdRequest,
): string {
  return JSON.stringify(
    GetAccountByIdRequest$outboundSchema.parse(getAccountByIdRequest),
  );
}

export function getAccountByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountByIdRequest' from JSON`,
  );
}

/** @internal */
export const GetAccountByIdResponse$inboundSchema: z.ZodType<
  GetAccountByIdResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.AccountResponse$inboundSchema,
  models.ErrorResponse$inboundSchema,
]);

/** @internal */
export type GetAccountByIdResponse$Outbound =
  | models.AccountResponse$Outbound
  | models.ErrorResponse$Outbound;

/** @internal */
export const GetAccountByIdResponse$outboundSchema: z.ZodType<
  GetAccountByIdResponse$Outbound,
  z.ZodTypeDef,
  GetAccountByIdResponse
> = z.union([
  models.AccountResponse$outboundSchema,
  models.ErrorResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAccountByIdResponse$ {
  /** @deprecated use `GetAccountByIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetAccountByIdResponse$inboundSchema;
  /** @deprecated use `GetAccountByIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetAccountByIdResponse$outboundSchema;
  /** @deprecated use `GetAccountByIdResponse$Outbound` instead. */
  export type Outbound = GetAccountByIdResponse$Outbound;
}

export function getAccountByIdResponseToJSON(
  getAccountByIdResponse: GetAccountByIdResponse,
): string {
  return JSON.stringify(
    GetAccountByIdResponse$outboundSchema.parse(getAccountByIdResponse),
  );
}

export function getAccountByIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAccountByIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAccountByIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAccountByIdResponse' from JSON`,
  );
}
