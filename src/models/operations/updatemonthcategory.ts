/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateMonthCategoryRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))
   */
  month: RFCDate;
  /**
   * The id of the category
   */
  categoryId: string;
  /**
   * The category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.
   */
  patchMonthCategoryWrapper: models.PatchMonthCategoryWrapper;
};

/** @internal */
export const UpdateMonthCategoryRequest$inboundSchema: z.ZodType<
  UpdateMonthCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  month: z.string().transform(v => new RFCDate(v)),
  category_id: z.string(),
  PatchMonthCategoryWrapper: models.PatchMonthCategoryWrapper$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "category_id": "categoryId",
    "PatchMonthCategoryWrapper": "patchMonthCategoryWrapper",
  });
});

/** @internal */
export type UpdateMonthCategoryRequest$Outbound = {
  budget_id: string;
  month: string;
  category_id: string;
  PatchMonthCategoryWrapper: models.PatchMonthCategoryWrapper$Outbound;
};

/** @internal */
export const UpdateMonthCategoryRequest$outboundSchema: z.ZodType<
  UpdateMonthCategoryRequest$Outbound,
  z.ZodTypeDef,
  UpdateMonthCategoryRequest
> = z.object({
  budgetId: z.string(),
  month: z.instanceof(RFCDate).transform(v => v.toString()),
  categoryId: z.string(),
  patchMonthCategoryWrapper: models.PatchMonthCategoryWrapper$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    categoryId: "category_id",
    patchMonthCategoryWrapper: "PatchMonthCategoryWrapper",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateMonthCategoryRequest$ {
  /** @deprecated use `UpdateMonthCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateMonthCategoryRequest$inboundSchema;
  /** @deprecated use `UpdateMonthCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateMonthCategoryRequest$outboundSchema;
  /** @deprecated use `UpdateMonthCategoryRequest$Outbound` instead. */
  export type Outbound = UpdateMonthCategoryRequest$Outbound;
}

export function updateMonthCategoryRequestToJSON(
  updateMonthCategoryRequest: UpdateMonthCategoryRequest,
): string {
  return JSON.stringify(
    UpdateMonthCategoryRequest$outboundSchema.parse(updateMonthCategoryRequest),
  );
}

export function updateMonthCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateMonthCategoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateMonthCategoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateMonthCategoryRequest' from JSON`,
  );
}
