/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export const GetTransactionsByAccountType = {
  Uncategorized: "uncategorized",
  Unapproved: "unapproved",
} as const;
/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export type GetTransactionsByAccountType = ClosedEnum<
  typeof GetTransactionsByAccountType
>;

export type GetTransactionsByAccountRequest = {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget).
   */
  budgetId: string;
  /**
   * The id of the account
   */
  accountId: string;
  /**
   * If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
   */
  sinceDate?: RFCDate | undefined;
  /**
   * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
   */
  type?: GetTransactionsByAccountType | undefined;
  /**
   * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
   */
  lastKnowledgeOfServer?: number | undefined;
};

/** @internal */
export const GetTransactionsByAccountType$inboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByAccountType
> = z.nativeEnum(GetTransactionsByAccountType);

/** @internal */
export const GetTransactionsByAccountType$outboundSchema: z.ZodNativeEnum<
  typeof GetTransactionsByAccountType
> = GetTransactionsByAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByAccountType$ {
  /** @deprecated use `GetTransactionsByAccountType$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByAccountType$inboundSchema;
  /** @deprecated use `GetTransactionsByAccountType$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByAccountType$outboundSchema;
}

/** @internal */
export const GetTransactionsByAccountRequest$inboundSchema: z.ZodType<
  GetTransactionsByAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  budget_id: z.string(),
  account_id: z.string(),
  since_date: z.string().transform(v => new RFCDate(v)).optional(),
  type: GetTransactionsByAccountType$inboundSchema.optional(),
  last_knowledge_of_server: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "budget_id": "budgetId",
    "account_id": "accountId",
    "since_date": "sinceDate",
    "last_knowledge_of_server": "lastKnowledgeOfServer",
  });
});

/** @internal */
export type GetTransactionsByAccountRequest$Outbound = {
  budget_id: string;
  account_id: string;
  since_date?: string | undefined;
  type?: string | undefined;
  last_knowledge_of_server?: number | undefined;
};

/** @internal */
export const GetTransactionsByAccountRequest$outboundSchema: z.ZodType<
  GetTransactionsByAccountRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsByAccountRequest
> = z.object({
  budgetId: z.string(),
  accountId: z.string(),
  sinceDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  type: GetTransactionsByAccountType$outboundSchema.optional(),
  lastKnowledgeOfServer: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    budgetId: "budget_id",
    accountId: "account_id",
    sinceDate: "since_date",
    lastKnowledgeOfServer: "last_knowledge_of_server",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsByAccountRequest$ {
  /** @deprecated use `GetTransactionsByAccountRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsByAccountRequest$inboundSchema;
  /** @deprecated use `GetTransactionsByAccountRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsByAccountRequest$outboundSchema;
  /** @deprecated use `GetTransactionsByAccountRequest$Outbound` instead. */
  export type Outbound = GetTransactionsByAccountRequest$Outbound;
}

export function getTransactionsByAccountRequestToJSON(
  getTransactionsByAccountRequest: GetTransactionsByAccountRequest,
): string {
  return JSON.stringify(
    GetTransactionsByAccountRequest$outboundSchema.parse(
      getTransactionsByAccountRequest,
    ),
  );
}

export function getTransactionsByAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsByAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsByAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsByAccountRequest' from JSON`,
  );
}
